[INFO ] 2019-07-06T09:13:40,084Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-091339.106/custom-cordapp_1_4_69a27856-9677-4f6f-ada2-256624981cc6.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:13:40,281Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-091339.106/custom-cordapp_1_4_69a27856-9677-4f6f-ada2-256624981cc6.jar {}
[INFO ] 2019-07-06T09:13:40,363Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:14:41,865Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-091441.327/custom-cordapp_1_4_682c7d77-1dd2-47ae-9b29-22190a2c6d4f.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:14:41,895Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-091441.327/custom-cordapp_1_4_682c7d77-1dd2-47ae-9b29-22190a2c6d4f.jar {}
[INFO ] 2019-07-06T09:14:41,952Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:14:43,093Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:14:43,102Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-07-06T09:14:43,186Z [main] model.LocalTypeInformationBuilder.buildNonAtomic - Properties of type bootcamp.TokenState do not satisfy its constructor, type has been marked as non-composable {}
[INFO ] 2019-07-06T09:17:57,404Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-091756.835/custom-cordapp_1_4_1e3987e3-fdaf-479b-9f77-316ec4ee7271.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:17:57,434Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-091756.835/custom-cordapp_1_4_1e3987e3-fdaf-479b-9f77-316ec4ee7271.jar {}
[INFO ] 2019-07-06T09:17:57,496Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:20:27,153Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092026.605/custom-cordapp_1_4_2f0597a6-1ae1-4591-aec7-2fd02c09109f.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:20:27,186Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092026.605/custom-cordapp_1_4_2f0597a6-1ae1-4591-aec7-2fd02c09109f.jar {}
[INFO ] 2019-07-06T09:20:27,249Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:20:28,387Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092026.605/custom-cordapp_1_4_2f0597a6-1ae1-4591-aec7-2fd02c09109f.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:20:28,387Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092026.605/custom-cordapp_1_4_2f0597a6-1ae1-4591-aec7-2fd02c09109f.jar {}
[INFO ] 2019-07-06T09:20:28,414Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:20:28,512Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-07-06T09:20:51,730Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092051.125/custom-cordapp_1_4_7faa059c-17b8-472a-98af-abb49e2c4e11.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:20:51,768Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092051.125/custom-cordapp_1_4_7faa059c-17b8-472a-98af-abb49e2c4e11.jar {}
[INFO ] 2019-07-06T09:20:51,825Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:20:52,831Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092051.125/custom-cordapp_1_4_7faa059c-17b8-472a-98af-abb49e2c4e11.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:20:52,831Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092051.125/custom-cordapp_1_4_7faa059c-17b8-472a-98af-abb49e2c4e11.jar {}
[INFO ] 2019-07-06T09:20:52,867Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:20:52,979Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:52,988Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[WARN ] 2019-07-06T09:20:54,626Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:54,652Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:54,657Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:54,675Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:54,679Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:54,685Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:54,692Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:54,696Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:20:54,700Z [main] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2019-07-06T09:22:01,458Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092200.897/custom-cordapp_1_4_cbbea9ff-7b87-4301-87f4-eb0d2e2145f6.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:22:01,496Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092200.897/custom-cordapp_1_4_cbbea9ff-7b87-4301-87f4-eb0d2e2145f6.jar {}
[INFO ] 2019-07-06T09:22:01,556Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:22:02,708Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092200.897/custom-cordapp_1_4_cbbea9ff-7b87-4301-87f4-eb0d2e2145f6.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:22:02,708Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092200.897/custom-cordapp_1_4_cbbea9ff-7b87-4301-87f4-eb0d2e2145f6.jar {}
[INFO ] 2019-07-06T09:22:02,739Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:22:02,901Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-07-06T09:22:41,667Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092241.048/custom-cordapp_1_4_550f9380-1d3a-4195-9725-b31ba98f2140.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:22:41,697Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092241.048/custom-cordapp_1_4_550f9380-1d3a-4195-9725-b31ba98f2140.jar {}
[INFO ] 2019-07-06T09:22:41,766Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:22:42,863Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-07-06T09:25:41,273Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092540.636/custom-cordapp_1_4_8e23045d-74ae-4afc-905c-a0751312e8ff.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:25:41,303Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092540.636/custom-cordapp_1_4_8e23045d-74ae-4afc-905c-a0751312e8ff.jar {}
[INFO ] 2019-07-06T09:25:41,365Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:25:42,363Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092540.636/custom-cordapp_1_4_8e23045d-74ae-4afc-905c-a0751312e8ff.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:25:42,364Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092540.636/custom-cordapp_1_4_8e23045d-74ae-4afc-905c-a0751312e8ff.jar {}
[INFO ] 2019-07-06T09:25:42,390Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:25:42,523Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-07-06T09:25:53,389Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092552.846/custom-cordapp_1_4_00980794-ecb0-44e6-8a31-d2e973506787.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:25:50,863Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-092552.846/custom-cordapp_1_4_00980794-ecb0-44e6-8a31-d2e973506787.jar {}
[INFO ] 2019-07-06T09:25:50,923Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:25:52,073Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-07-06T09:34:06,891Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-093406.186/custom-cordapp_1_4_0088d3b5-42fd-4741-b2fc-db290fee67e3.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:34:06,931Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-093406.186/custom-cordapp_1_4_0088d3b5-42fd-4741-b2fc-db290fee67e3.jar {}
[INFO ] 2019-07-06T09:34:07,006Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:34:08,178Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2019-07-06T09:34:09,934Z [main] internal.Verifier.verifyContracts - Error validating transaction 4981EAA8FB6908A010CC7B021DBA5DC3F57BD7C404DBF6148A3AF9B8D1B34ACC. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: It is not empty
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:34:09,947Z [main] internal.Verifier.verifyContracts - Error validating transaction 4981EAA8FB6908A010CC7B021DBA5DC3F57BD7C404DBF6148A3AF9B8D1B34ACC. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: It is not empty
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:34:25,864Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-093425.279/custom-cordapp_1_4_ee8f9a0f-84b0-4abb-954a-2e22564af0b1.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:34:25,896Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-093425.279/custom-cordapp_1_4_ee8f9a0f-84b0-4abb-954a-2e22564af0b1.jar {}
[INFO ] 2019-07-06T09:34:25,956Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:34:27,019Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2019-07-06T09:34:28,779Z [main] internal.Verifier.verifyContracts - Error validating transaction CD3587ABC19BEEAC2907E5212288AA23994C06ADFF90E109230DCC8319FCA695. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: It is not empty
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:34:28,811Z [main] internal.Verifier.verifyContracts - Error validating transaction CD3587ABC19BEEAC2907E5212288AA23994C06ADFF90E109230DCC8319FCA695. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: It is not empty
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:37:24,060Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-093723.409/custom-cordapp_1_4_8b2129fd-d9c6-42cf-a7b6-53ebb49cdd36.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:37:24,093Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-093723.409/custom-cordapp_1_4_8b2129fd-d9c6-42cf-a7b6-53ebb49cdd36.jar {}
[INFO ] 2019-07-06T09:37:24,155Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:37:25,217Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2019-07-06T09:37:27,048Z [main] internal.Verifier.verifyContracts - Error validating transaction 28243A138DA7EDC87C234241982E8562E8FD742B14C04C008F5803627ABBC29B. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: null
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:37:27,061Z [main] internal.Verifier.verifyContracts - Error validating transaction 28243A138DA7EDC87C234241982E8562E8FD742B14C04C008F5803627ABBC29B. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: null
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:40:27,598Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094027.020/custom-cordapp_1_4_385a1362-f79a-439f-b672-5e1630abd853.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:40:27,636Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094027.020/custom-cordapp_1_4_385a1362-f79a-439f-b672-5e1630abd853.jar {}
[INFO ] 2019-07-06T09:40:27,698Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:40:30,427Z [main] internal.Verifier.verifyContracts - Error validating transaction 3971D31C62AC47128D373B0220197BEE013D7783F585B2B409636E96A47E70DA. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 output states
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:40:30,435Z [main] internal.Verifier.verifyContracts - Error validating transaction 3971D31C62AC47128D373B0220197BEE013D7783F585B2B409636E96A47E70DA. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 output states
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:40:32,206Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094027.020/custom-cordapp_1_4_385a1362-f79a-439f-b672-5e1630abd853.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:40:32,207Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094027.020/custom-cordapp_1_4_385a1362-f79a-439f-b672-5e1630abd853.jar {}
[INFO ] 2019-07-06T09:40:32,238Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:40:32,313Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094027.020/custom-cordapp_1_4_385a1362-f79a-439f-b672-5e1630abd853.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:40:32,316Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094027.020/custom-cordapp_1_4_385a1362-f79a-439f-b672-5e1630abd853.jar {}
[INFO ] 2019-07-06T09:40:32,341Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:40:33,775Z [main] internal.Verifier.verifyContracts - Error validating transaction EE0E33B8D01C25FAE88A9A06FB47BA3872B951B00853BFCB92CFC4A136872139. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 commnand
	at bootcamp.TokenContract.verify(TokenContract.java:24) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:40:33,782Z [main] internal.Verifier.verifyContracts - Error validating transaction EE0E33B8D01C25FAE88A9A06FB47BA3872B951B00853BFCB92CFC4A136872139. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 commnand
	at bootcamp.TokenContract.verify(TokenContract.java:24) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:40:34,961Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094027.020/custom-cordapp_1_4_385a1362-f79a-439f-b672-5e1630abd853.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:40:34,961Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094027.020/custom-cordapp_1_4_385a1362-f79a-439f-b672-5e1630abd853.jar {}
[INFO ] 2019-07-06T09:40:34,982Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:40:35,042Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2019-07-06T09:40:36,021Z [main] internal.Verifier.verifyContracts - Error validating transaction B896BE1F8058396E7B1BF97C14F120483D865772C845BB8FC36CB05884120D71. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have 0 input states
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:40:36,030Z [main] internal.Verifier.verifyContracts - Error validating transaction B896BE1F8058396E7B1BF97C14F120483D865772C845BB8FC36CB05884120D71. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have 0 input states
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:43:19,382Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:43:19,420Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar {}
[INFO ] 2019-07-06T09:43:19,482Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:43:22,417Z [main] internal.Verifier.verifyContracts - Error validating transaction F61A69724BD8C537A6626EC4ED1000E27D66D605BC82695E1209E4C7BAFD1F9C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 output states
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:43:22,425Z [main] internal.Verifier.verifyContracts - Error validating transaction F61A69724BD8C537A6626EC4ED1000E27D66D605BC82695E1209E4C7BAFD1F9C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 output states
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:43:23,907Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:43:23,912Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar {}
[INFO ] 2019-07-06T09:43:23,940Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:43:23,992Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:43:23,992Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar {}
[INFO ] 2019-07-06T09:43:24,008Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:43:24,079Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:43:24,102Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:43:25,310Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:43:25,311Z [main] internal.Verifier.warnOnce - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2019-07-06T09:43:25,312Z [main] internal.Verifier.verifyContracts - Error validating transaction B91CCA763417BC39BA43711F8F252C9C7FF6D6C1477E84316BA8DD37C69DE5E9. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx output should be a token
	at bootcamp.TokenContract.verify(TokenContract.java:28) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[WARN ] 2019-07-06T09:43:25,315Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-07-06T09:43:25,316Z [main] internal.Verifier.verifyContracts - Error validating transaction B91CCA763417BC39BA43711F8F252C9C7FF6D6C1477E84316BA8DD37C69DE5E9. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx output should be a token
	at bootcamp.TokenContract.verify(TokenContract.java:28) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:43:26,505Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:43:26,506Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar {}
[INFO ] 2019-07-06T09:43:26,515Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:43:27,455Z [main] internal.Verifier.verifyContracts - Error validating transaction B213AC79E73D8509A0131B8CE6C5A7520AB1A1423C8B7C7DE3C76BDA30C963BE. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 commnand
	at bootcamp.TokenContract.verify(TokenContract.java:24) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:43:27,460Z [main] internal.Verifier.verifyContracts - Error validating transaction B213AC79E73D8509A0131B8CE6C5A7520AB1A1423C8B7C7DE3C76BDA30C963BE. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 commnand
	at bootcamp.TokenContract.verify(TokenContract.java:24) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:43:28,537Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:43:28,537Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094318.736/custom-cordapp_1_4_746a0f2a-418f-445c-9439-9a060d167cef.jar {}
[INFO ] 2019-07-06T09:43:28,575Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:43:28,660Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2019-07-06T09:43:29,514Z [main] internal.Verifier.verifyContracts - Error validating transaction C4A23C7ACE34E0C96056F4F36B4A7CF1BABC776472D401A9310C85D571E5EACD. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have 0 input states
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:43:29,524Z [main] internal.Verifier.verifyContracts - Error validating transaction C4A23C7ACE34E0C96056F4F36B4A7CF1BABC776472D401A9310C85D571E5EACD. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have 0 input states
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:49:33,152Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:49:33,185Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar {}
[INFO ] 2019-07-06T09:49:33,253Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:49:36,282Z [main] internal.Verifier.verifyContracts - Error validating transaction 8B683C5F6ABBCA6C4EAD2C8A46DC44DD11A6538560C8C28000979CE04515FD23. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 output states
	at bootcamp.TokenContract.verify(TokenContract.java:21) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:49:36,290Z [main] internal.Verifier.verifyContracts - Error validating transaction 8B683C5F6ABBCA6C4EAD2C8A46DC44DD11A6538560C8C28000979CE04515FD23. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 output states
	at bootcamp.TokenContract.verify(TokenContract.java:21) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:49:37,944Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:49:37,944Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar {}
[INFO ] 2019-07-06T09:49:37,975Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:49:38,036Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:49:38,040Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar {}
[INFO ] 2019-07-06T09:49:38,067Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:49:38,149Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:49:38,171Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:49:39,337Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:49:39,338Z [main] internal.Verifier.warnOnce - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2019-07-06T09:49:39,338Z [main] internal.Verifier.verifyContracts - Error validating transaction 71DAE23220D026C11B0E14C4D8E5F176DE2138314ACFD0DA06E48AAE0BC6E5C0. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx output should be a token
	at bootcamp.TokenContract.verify(TokenContract.java:29) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[WARN ] 2019-07-06T09:49:39,342Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-07-06T09:49:39,342Z [main] internal.Verifier.verifyContracts - Error validating transaction 71DAE23220D026C11B0E14C4D8E5F176DE2138314ACFD0DA06E48AAE0BC6E5C0. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx output should be a token
	at bootcamp.TokenContract.verify(TokenContract.java:29) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:49:40,723Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:49:40,727Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar {}
[INFO ] 2019-07-06T09:49:40,753Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:49:41,690Z [main] internal.Verifier.verifyContracts - Error validating transaction 6E6FD7CCB57173A64AC6E6162ED6100706A0371A3A04F6A4402EB63548083CC5. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 commnand
	at bootcamp.TokenContract.verify(TokenContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:49:41,695Z [main] internal.Verifier.verifyContracts - Error validating transaction 6E6FD7CCB57173A64AC6E6162ED6100706A0371A3A04F6A4402EB63548083CC5. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 commnand
	at bootcamp.TokenContract.verify(TokenContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:49:42,787Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:49:42,788Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar {}
[INFO ] 2019-07-06T09:49:42,809Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:49:43,692Z [main] internal.Verifier.verifyContracts - Error validating transaction FBD91BD44AF5A1C972C3701E2FC42647D3818415254EA51454737608A2D96CB9. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Amount should be greater than 0
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:49:43,697Z [main] internal.Verifier.verifyContracts - Error validating transaction FBD91BD44AF5A1C972C3701E2FC42647D3818415254EA51454737608A2D96CB9. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Amount should be greater than 0
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:49:44,545Z [main] internal.Verifier.verifyContracts - Error validating transaction B1AD00543CE79A8362EF01AEFA1413ED2BE4909ACA291BC2F64EB90FCDDD4262. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Amount should be greater than 0
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:49:44,550Z [main] internal.Verifier.verifyContracts - Error validating transaction B1AD00543CE79A8362EF01AEFA1413ED2BE4909ACA291BC2F64EB90FCDDD4262. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Amount should be greater than 0
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:49:46,485Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:49:46,486Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-094932.572/custom-cordapp_1_4_9a5185df-1dde-4f77-b661-4abd2f223292.jar {}
[INFO ] 2019-07-06T09:49:46,499Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:49:46,546Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2019-07-06T09:49:47,324Z [main] internal.Verifier.verifyContracts - Error validating transaction 93A07B0A0E8C6F2233FEDCFEED4BBD58B81FBC6EAD651348EA322F2C0D576145. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should be an issue command
	at bootcamp.TokenContract.verify(TokenContract.java:33) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:257) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:295) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:31) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:49:47,344Z [main] internal.Verifier.verifyContracts - Error validating transaction 9ECD58131E6D1F91CFDC5AEB557EFC54CDE785EC86F81180B6F83E694A45050E. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have 0 input states
	at bootcamp.TokenContract.verify(TokenContract.java:17) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:49:47,355Z [main] internal.Verifier.verifyContracts - Error validating transaction 9ECD58131E6D1F91CFDC5AEB557EFC54CDE785EC86F81180B6F83E694A45050E. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have 0 input states
	at bootcamp.TokenContract.verify(TokenContract.java:17) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:53:27,498Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095326.861/custom-cordapp_1_4_6e67180a-6e6c-4594-b538-da5e2decc5b6.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:53:27,528Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095326.861/custom-cordapp_1_4_6e67180a-6e6c-4594-b538-da5e2decc5b6.jar {}
[INFO ] 2019-07-06T09:53:27,582Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:53:30,420Z [main] internal.Verifier.verifyContracts - Error validating transaction 634156F81AA6778B985CE996023645F5EFCC293040F15FC82BE64D9ECA12D069. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer is required
	at bootcamp.TokenContract.verify(TokenContract.java:41) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:30,437Z [main] internal.Verifier.verifyContracts - Error validating transaction 634156F81AA6778B985CE996023645F5EFCC293040F15FC82BE64D9ECA12D069. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer is required
	at bootcamp.TokenContract.verify(TokenContract.java:41) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:32,137Z [main] internal.Verifier.verifyContracts - Error validating transaction 1B1282CE091E00EA3D88F73523C3EEB5E542BDF10713C470E6A5690D29F641F3. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer is required
	at bootcamp.TokenContract.verify(TokenContract.java:41) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:32,141Z [main] internal.Verifier.verifyContracts - Error validating transaction 1B1282CE091E00EA3D88F73523C3EEB5E542BDF10713C470E6A5690D29F641F3. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer is required
	at bootcamp.TokenContract.verify(TokenContract.java:41) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:53:44,471Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:53:44,501Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar {}
[INFO ] 2019-07-06T09:53:44,563Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:53:47,361Z [main] internal.Verifier.verifyContracts - Error validating transaction 841851834FC7611FCD186E57C540EE70C28F2B10D16143CD64F739F81CEB543A. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 output states
	at bootcamp.TokenContract.verify(TokenContract.java:21) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:47,370Z [main] internal.Verifier.verifyContracts - Error validating transaction 841851834FC7611FCD186E57C540EE70C28F2B10D16143CD64F739F81CEB543A. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 output states
	at bootcamp.TokenContract.verify(TokenContract.java:21) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:53:49,112Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:53:49,120Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar {}
[INFO ] 2019-07-06T09:53:49,136Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:53:50,651Z [main] internal.Verifier.verifyContracts - Error validating transaction 688235BB7ACDF8330A48DAE297129191C1BDB4A4EB16BA721D1F7B36A2E325F3. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer is required
	at bootcamp.TokenContract.verify(TokenContract.java:41) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:50,655Z [main] internal.Verifier.verifyContracts - Error validating transaction 688235BB7ACDF8330A48DAE297129191C1BDB4A4EB16BA721D1F7B36A2E325F3. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer is required
	at bootcamp.TokenContract.verify(TokenContract.java:41) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:52,157Z [main] internal.Verifier.verifyContracts - Error validating transaction 5B2CF5B8F4E1D499C2B6F717B3A45FB5C9645441BD772D98CEB6354D79415AA0. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer is required
	at bootcamp.TokenContract.verify(TokenContract.java:41) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:52,166Z [main] internal.Verifier.verifyContracts - Error validating transaction 5B2CF5B8F4E1D499C2B6F717B3A45FB5C9645441BD772D98CEB6354D79415AA0. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer is required
	at bootcamp.TokenContract.verify(TokenContract.java:41) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:53:54,086Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:53:54,086Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar {}
[INFO ] 2019-07-06T09:53:54,115Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T09:53:54,167Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:53:54,168Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar {}
[INFO ] 2019-07-06T09:53:54,180Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:53:54,240Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:53:54,250Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:53:55,265Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-07-06T09:53:55,266Z [main] internal.Verifier.warnOnce - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2019-07-06T09:53:55,266Z [main] internal.Verifier.verifyContracts - Error validating transaction 86D118A431D578EA47D46EB6195DD7B7050ED338943A0CADF4F9CD1BCF274D0F. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx output should be a token
	at bootcamp.TokenContract.verify(TokenContract.java:29) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[WARN ] 2019-07-06T09:53:55,270Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-07-06T09:53:55,271Z [main] internal.Verifier.verifyContracts - Error validating transaction 86D118A431D578EA47D46EB6195DD7B7050ED338943A0CADF4F9CD1BCF274D0F. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx output should be a token
	at bootcamp.TokenContract.verify(TokenContract.java:29) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:53:56,348Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:53:56,348Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar {}
[INFO ] 2019-07-06T09:53:56,377Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:53:57,397Z [main] internal.Verifier.verifyContracts - Error validating transaction CE1B224D568B97020B60466F37EB1896CAC5B1AC2E4AFACFDD7B7D8545E78CA7. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should be an issue command
	at bootcamp.TokenContract.verify(TokenContract.java:33) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:57,401Z [main] internal.Verifier.verifyContracts - Error validating transaction CE1B224D568B97020B60466F37EB1896CAC5B1AC2E4AFACFDD7B7D8545E78CA7. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should be an issue command
	at bootcamp.TokenContract.verify(TokenContract.java:33) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:53:58,243Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:53:58,244Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar {}
[INFO ] 2019-07-06T09:53:58,251Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:53:59,103Z [main] internal.Verifier.verifyContracts - Error validating transaction 71413CE7D83CCB5AE08DFBA57EB908229DC146EAEEBA7255F8709C91162228E5. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 commnand
	at bootcamp.TokenContract.verify(TokenContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:53:59,107Z [main] internal.Verifier.verifyContracts - Error validating transaction 71413CE7D83CCB5AE08DFBA57EB908229DC146EAEEBA7255F8709C91162228E5. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have exactly 1 commnand
	at bootcamp.TokenContract.verify(TokenContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:54:00,101Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:54:00,102Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar {}
[INFO ] 2019-07-06T09:54:00,121Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[ERROR] 2019-07-06T09:54:00,979Z [main] internal.Verifier.verifyContracts - Error validating transaction E42885DDC067434DBFDDB1689F13CF9C152DFA43D67035C33D430FCFF53DCFC8. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Amount should be greater than 0
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:54:00,982Z [main] internal.Verifier.verifyContracts - Error validating transaction E42885DDC067434DBFDDB1689F13CF9C152DFA43D67035C33D430FCFF53DCFC8. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Amount should be greater than 0
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:54:01,784Z [main] internal.Verifier.verifyContracts - Error validating transaction C9EE9FDF43618E06B4823B119D2F0703F0DCE598E8976A174BF53508465194B4. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Amount should be greater than 0
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:54:01,787Z [main] internal.Verifier.verifyContracts - Error validating transaction C9EE9FDF43618E06B4823B119D2F0703F0DCE598E8976A174BF53508465194B4. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Amount should be greater than 0
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T09:54:03,531Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T09:54:03,531Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/generated-custom-cordapps/20190706-095343.804/custom-cordapp_1_4_3a5b3af7-da07-47f8-a37d-392daa4a31e8.jar {}
[INFO ] 2019-07-06T09:54:03,552Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-07-06T09:54:03,592Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2019-07-06T09:54:04,418Z [main] internal.Verifier.verifyContracts - Error validating transaction 9148D399F0D7680DFCF9B582C3F205F632EBD04049D5419F02AE00F0A6D7CD8D. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should be an issue command
	at bootcamp.TokenContract.verify(TokenContract.java:33) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:257) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:295) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:31) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:54:04,438Z [main] internal.Verifier.verifyContracts - Error validating transaction F0AB4E3D67009B22EE38A0C2C622C9C32C8AA3310C2B27C6D1698D92C288499D. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have 0 input states
	at bootcamp.TokenContract.verify(TokenContract.java:17) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[ERROR] 2019-07-06T09:54:04,445Z [main] internal.Verifier.verifyContracts - Error validating transaction F0AB4E3D67009B22EE38A0C2C622C9C32C8AA3310C2B27C6D1698D92C288499D. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Tx should have 0 input states
	at bootcamp.TokenContract.verify(TokenContract.java:17) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) ~[junit-rt.jar:?]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ~[junit-rt.jar:?]
[INFO ] 2019-07-06T10:27:55,433Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/dienigma/work/bootcamp-cordapp ... {}
[INFO ] 2019-07-06T10:28:08,358Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102748.573/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:28:08,364Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102748.573/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:08,394Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102748.573/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:08,483Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:09,338Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:09,485Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:09,486Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:09,692Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:27:48.288Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:26,648Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:26,652Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102748.573/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:26,652Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:26,654Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:26,781Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:26,790Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:29,506Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:30,311Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:30,373Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:30,396Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:30,396Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:30,767Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:30,779Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:30,780Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408910779) {}
[INFO ] 2019-07-06T10:28:30,786Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:30,994Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408910779) {}
[INFO ] 2019-07-06T10:28:31,072Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:31,121Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408910779) {}
[INFO ] 2019-07-06T10:28:31,180Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:31,195Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:31,201Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:28:31,206Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:28:31,639Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408910779) {}
[INFO ] 2019-07-06T10:28:31,669Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408910779) {}
[INFO ] 2019-07-06T10:28:31,672Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:31,672Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408910779) {}
[INFO ] 2019-07-06T10:28:31,672Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:31,727Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102748.573/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:28:31,728Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102748.573/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:31,728Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102748.573/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:31,756Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:31,771Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:31,816Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:31,816Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:31,821Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:27:48.288Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:32,440Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:32,443Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102748.573/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:32,443Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:32,444Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:32,447Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:32,447Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:32,619Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:32,632Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:32,635Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:32,635Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:32,660Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:32,660Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:32,828Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:32,835Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:32,835Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408912835) {}
[INFO ] 2019-07-06T10:28:32,838Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:32,849Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408912835) {}
[INFO ] 2019-07-06T10:28:32,860Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:32,867Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408912835) {}
[INFO ] 2019-07-06T10:28:32,876Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:32,926Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:32,938Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408912835) {}
[INFO ] 2019-07-06T10:28:32,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408910779) {}
[INFO ] 2019-07-06T10:28:32,946Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:32,960Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408912835) {}
[INFO ] 2019-07-06T10:28:32,962Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:32,977Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408912835) {}
[INFO ] 2019-07-06T10:28:32,979Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:32,980Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408912835) {}
[INFO ] 2019-07-06T10:28:32,981Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:33,065Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102748.573/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:28:33,066Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102748.573/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:33,066Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102748.573/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:33,087Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:33,109Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:33,178Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:33,180Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:33,183Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:27:48.288Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:33,700Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:33,703Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102748.573/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:33,703Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:33,704Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:33,708Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:33,708Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:33,825Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:33,839Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:33,842Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:33,842Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:33,864Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:33,864Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:34,047Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:34,052Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:34,052Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408914052) {}
[INFO ] 2019-07-06T10:28:34,055Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:34,065Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408914052) {}
[INFO ] 2019-07-06T10:28:34,075Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:34,086Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408914052) {}
[INFO ] 2019-07-06T10:28:34,105Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:34,145Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:34,156Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408914052) {}
[INFO ] 2019-07-06T10:28:34,160Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408910779) {}
[INFO ] 2019-07-06T10:28:34,163Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:34,175Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408914052) {}
[INFO ] 2019-07-06T10:28:34,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:34,190Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408912835) {}
[INFO ] 2019-07-06T10:28:34,192Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:34,205Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408914052) {}
[INFO ] 2019-07-06T10:28:34,207Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:34,219Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408914052) {}
[INFO ] 2019-07-06T10:28:34,219Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:34,219Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408914052) {}
[INFO ] 2019-07-06T10:28:34,219Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-06T10:28:34,567Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fab78ba9-3691-4861-b914-d878f8aa42ee, invocation_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, invocation_timestamp=2019-07-06T10:28:34.260Z, origin=Only For Testing, session_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, session_timestamp=2019-07-06T10:28:34.260Z, thread-id=102}
[WARN ] 2019-07-06T10:28:34,567Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fab78ba9-3691-4861-b914-d878f8aa42ee, invocation_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, invocation_timestamp=2019-07-06T10:28:34.260Z, origin=Only For Testing, session_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, session_timestamp=2019-07-06T10:28:34.260Z, thread-id=102}
[INFO ] 2019-07-06T10:28:36,719Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fab78ba9-3691-4861-b914-d878f8aa42ee, invocation_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, invocation_timestamp=2019-07-06T10:28:34.260Z, origin=Only For Testing, session_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, session_timestamp=2019-07-06T10:28:34.260Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[INFO ] 2019-07-06T10:28:36,719Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fab78ba9-3691-4861-b914-d878f8aa42ee, invocation_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, invocation_timestamp=2019-07-06T10:28:34.260Z, origin=Only For Testing, session_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, session_timestamp=2019-07-06T10:28:34.260Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[INFO ] 2019-07-06T10:28:36,797Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fab78ba9-3691-4861-b914-d878f8aa42ee, invocation_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, invocation_timestamp=2019-07-06T10:28:34.260Z, origin=Only For Testing, session_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, session_timestamp=2019-07-06T10:28:34.260Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[INFO ] 2019-07-06T10:28:37,006Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[WARN ] 2019-07-06T10:28:37,018Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[INFO ] 2019-07-06T10:28:37,075Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[INFO ] 2019-07-06T10:28:37,109Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fab78ba9-3691-4861-b914-d878f8aa42ee, invocation_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, invocation_timestamp=2019-07-06T10:28:34.260Z, origin=Only For Testing, session_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, session_timestamp=2019-07-06T10:28:34.260Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[INFO ] 2019-07-06T10:28:37,109Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fab78ba9-3691-4861-b914-d878f8aa42ee, invocation_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, invocation_timestamp=2019-07-06T10:28:34.260Z, origin=Only For Testing, session_id=21d5cea4-2e77-4aa8-8a82-6fae10b606f3, session_timestamp=2019-07-06T10:28:34.260Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[INFO ] 2019-07-06T10:28:37,141Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:37,145Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2384736343851844463)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), frozenFiber=E3BA8A3D7BB61E5D85880E16FCD79AA18BF597554FE4A01030A1D8CD4D9B918C), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6f99286a, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@27146999], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=0ed77134-3ec0-4c1d-b11a-740d7def4de9) {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[INFO ] 2019-07-06T10:28:37,147Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] has error [0] {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:37,148Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] error allowed to propagate {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[WARN ] 2019-07-06T10:28:37,168Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] errored, dumping all transitions:

 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:36.967Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=5ACCB4695B658EC078A1E68A53D636908B12654B0B130B26C1BC8DEA5FBF6BC3), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c4e3fd6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c4e3fd6])
    SignalFlowHasStarted(flowId=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8618313154411759463), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2384736343851844463), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8618313154411759463-8982654209018988135-0-0), senderUUID=0ed77134-3ec0-4c1d-b11a-740d7def4de9))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=2384736343851844463): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463)), errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c4e3fd6]
    []


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:36.971Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:36.975Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:36.998Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), maySkipCheckpoint=false, fiber=666F716741248AB0C163D650A56BBA614165C2026EA3D94BB5A309259FDD94CF, )
  Actions: 
    PersistCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2384736343851844463)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463)), errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), frozenFiber=666F716741248AB0C163D650A56BBA614165C2026EA3D94BB5A309259FDD94CF), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=5ACCB4695B658EC078A1E68A53D636908B12654B0B130B26C1BC8DEA5FBF6BC3)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), frozenFiber=666F716741248AB0C163D650A56BBA614165C2026EA3D94BB5A309259FDD94CF)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.001Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=2384736343851844463).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.019Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.056Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E17BE86CE82875EAAB1871630C33B1B010455B825BBBEBDE7228BE6D33DCC234, )
  Actions: 
    PersistCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2384736343851844463)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463)), errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E17BE86CE82875EAAB1871630C33B1B010455B825BBBEBDE7228BE6D33DCC234), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    666F716741248AB0C163D650A56BBA614165C2026EA3D94BB5A309259FDD94CF
    E17BE86CE82875EAAB1871630C33B1B010455B825BBBEBDE7228BE6D33DCC234
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.062Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8618313154411759463), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8618313154411759463-8982654209018988135-2-0), senderUUID=0ed77134-3ec0-4c1d-b11a-740d7def4de9))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.075Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.084Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.090Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), maySkipCheckpoint=false, fiber=E3BA8A3D7BB61E5D85880E16FCD79AA18BF597554FE4A01030A1D8CD4D9B918C, )
  Actions: 
    PersistCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2384736343851844463)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463)), errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), frozenFiber=E3BA8A3D7BB61E5D85880E16FCD79AA18BF597554FE4A01030A1D8CD4D9B918C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))])
checkpoint.flowState.frozenFiber.hash: 
    E17BE86CE82875EAAB1871630C33B1B010455B825BBBEBDE7228BE6D33DCC234
    E3BA8A3D7BB61E5D85880E16FCD79AA18BF597554FE4A01030A1D8CD4D9B918C
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.094Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.140Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2384736343851844463), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@27146999, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2384736343851844463).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@27146999]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.141Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.141Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.149Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5349118732937093426, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.153Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.154Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[WARN ] 2019-07-06T10:28:37,169Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:28:37,170Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[WARN ] 2019-07-06T10:28:37,223Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] errored, dumping all transitions:

 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:36.967Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=5ACCB4695B658EC078A1E68A53D636908B12654B0B130B26C1BC8DEA5FBF6BC3), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c4e3fd6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c4e3fd6])
    SignalFlowHasStarted(flowId=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8618313154411759463), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2384736343851844463), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8618313154411759463-8982654209018988135-0-0), senderUUID=0ed77134-3ec0-4c1d-b11a-740d7def4de9))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=2384736343851844463): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463)), errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c4e3fd6]
    []


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:36.971Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:36.975Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:36.998Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), maySkipCheckpoint=false, fiber=666F716741248AB0C163D650A56BBA614165C2026EA3D94BB5A309259FDD94CF, )
  Actions: 
    PersistCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2384736343851844463)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463)), errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), frozenFiber=666F716741248AB0C163D650A56BBA614165C2026EA3D94BB5A309259FDD94CF), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=5ACCB4695B658EC078A1E68A53D636908B12654B0B130B26C1BC8DEA5FBF6BC3)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), frozenFiber=666F716741248AB0C163D650A56BBA614165C2026EA3D94BB5A309259FDD94CF)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.001Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=2384736343851844463).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.019Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.056Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E17BE86CE82875EAAB1871630C33B1B010455B825BBBEBDE7228BE6D33DCC234, )
  Actions: 
    PersistCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2384736343851844463)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463)), errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E17BE86CE82875EAAB1871630C33B1B010455B825BBBEBDE7228BE6D33DCC234), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    666F716741248AB0C163D650A56BBA614165C2026EA3D94BB5A309259FDD94CF
    E17BE86CE82875EAAB1871630C33B1B010455B825BBBEBDE7228BE6D33DCC234
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.062Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8618313154411759463), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8618313154411759463-8982654209018988135-2-0), senderUUID=0ed77134-3ec0-4c1d-b11a-740d7def4de9))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.075Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.084Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.090Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), maySkipCheckpoint=false, fiber=E3BA8A3D7BB61E5D85880E16FCD79AA18BF597554FE4A01030A1D8CD4D9B918C, )
  Actions: 
    PersistCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2384736343851844463)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463)), errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), frozenFiber=E3BA8A3D7BB61E5D85880E16FCD79AA18BF597554FE4A01030A1D8CD4D9B918C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))])
checkpoint.flowState.frozenFiber.hash: 
    E17BE86CE82875EAAB1871630C33B1B010455B825BBBEBDE7228BE6D33DCC234
    E3BA8A3D7BB61E5D85880E16FCD79AA18BF597554FE4A01030A1D8CD4D9B918C
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.094Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.140Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2384736343851844463), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@27146999, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2384736343851844463).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-8618313154411759463))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@27146999]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.141Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.141Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.149Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5349118732937093426, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.153Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.154Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] ---
  Timestamp: 2019-07-06T10:28:37.203Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5349118732937093426)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)], senderUUID=0ed77134-3ec0-4c1d-b11a-740d7def4de9)
    CreateTransaction
    RemoveCheckpoint(id=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@27146999])
    ReleaseSoftLocks(uuid=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@27146999])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2384736343851844463)])
    RemoveFlow(flowId=[8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5349118732937093426, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Invocation, sessionId=640c6e63-5f3b-497f-ad2c-f076c8fc5702, timestamp: 2019-07-06T10:28:36.929Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2384736343851844463)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--8618313154411759463-8982654209018988135)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2384736343851844463))]), frozenFiber=E3BA8A3D7BB61E5D85880E16FCD79AA18BF597554FE4A01030A1D8CD4D9B918C), errorState=Errored(errors=[FlowError(errorId=-5349118732937093426, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6f99286a, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=0ed77134-3ec0-4c1d-b11a-740d7def4de9))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@27146999]
    []
 {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
[WARN ] 2019-07-06T10:28:37,223Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=8107a9e9-6da5-4e8a-9b5b-6bea6ebe6bac, invocation_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, invocation_timestamp=2019-07-06T10:28:36.929Z, origin=O=Mock Company 1, L=London, C=GB, session_id=640c6e63-5f3b-497f-ad2c-f076c8fc5702, session_timestamp=2019-07-06T10:28:36.929Z, thread-id=102, tx_id=5438386BF4D1DB14C40C0328178B231A81737A3975A31308F7534CBBC7BD2CFE}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2384736343851844463) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:37,491Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102837.351/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:28:37,493Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102837.351/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:37,494Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102837.351/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:37,519Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:37,525Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:37,528Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:37,528Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:37,535Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:37.351Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:38,088Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:38,090Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102837.351/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:38,090Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:38,092Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:38,095Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:38,095Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:38,238Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:38,253Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:38,289Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:38,298Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:38,298Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:38,461Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:38,467Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:38,468Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408918468) {}
[INFO ] 2019-07-06T10:28:38,471Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:38,491Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408918468) {}
[INFO ] 2019-07-06T10:28:38,508Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:38,521Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408918468) {}
[INFO ] 2019-07-06T10:28:38,548Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:38,578Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:38,581Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:28:38,582Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:28:38,592Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408918468) {}
[INFO ] 2019-07-06T10:28:38,600Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408918468) {}
[INFO ] 2019-07-06T10:28:38,600Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:38,600Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408918468) {}
[INFO ] 2019-07-06T10:28:38,601Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:38,603Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102837.351/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:28:38,603Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102837.351/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:38,603Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102837.351/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:38,641Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:38,652Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:38,681Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:38,682Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:38,686Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:37.351Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:39,142Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:39,144Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102837.351/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:39,144Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:39,145Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:39,146Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:39,147Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:39,243Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:39,252Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:39,254Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:39,255Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:39,275Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:39,276Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:39,407Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:39,413Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:39,413Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408919413) {}
[INFO ] 2019-07-06T10:28:39,415Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:39,424Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408919413) {}
[INFO ] 2019-07-06T10:28:39,433Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:39,448Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408919413) {}
[INFO ] 2019-07-06T10:28:39,461Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:39,478Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:39,488Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408919413) {}
[INFO ] 2019-07-06T10:28:39,497Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408918468) {}
[INFO ] 2019-07-06T10:28:39,499Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:39,512Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408919413) {}
[INFO ] 2019-07-06T10:28:39,514Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:39,528Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408919413) {}
[INFO ] 2019-07-06T10:28:39,528Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:39,528Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408919413) {}
[INFO ] 2019-07-06T10:28:39,528Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:39,531Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102837.351/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:28:39,531Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102837.351/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:39,531Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102837.351/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:39,539Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:39,551Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:39,578Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:39,578Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:39,582Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:37.351Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:40,041Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:40,042Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102837.351/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:40,043Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:40,044Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:40,046Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:40,047Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:40,148Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:40,158Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:40,161Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:40,162Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:40,179Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:40,179Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:40,310Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:40,316Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:40,316Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408920316) {}
[INFO ] 2019-07-06T10:28:40,318Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:40,329Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408920316) {}
[INFO ] 2019-07-06T10:28:40,339Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:40,343Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408920316) {}
[INFO ] 2019-07-06T10:28:40,354Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:40,387Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:40,396Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408920316) {}
[INFO ] 2019-07-06T10:28:40,401Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408918468) {}
[INFO ] 2019-07-06T10:28:40,403Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:40,412Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408920316) {}
[INFO ] 2019-07-06T10:28:40,413Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:40,421Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408919413) {}
[INFO ] 2019-07-06T10:28:40,422Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:40,431Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408920316) {}
[INFO ] 2019-07-06T10:28:40,432Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:40,442Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408920316) {}
[INFO ] 2019-07-06T10:28:40,442Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:40,442Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408920316) {}
[INFO ] 2019-07-06T10:28:40,442Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:42,293Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=0abc0dfa-5dba-48d0-b6ab-69382e53411a, invocation_id=6c9f895e-3d73-4eb3-a206-12095953e201, invocation_timestamp=2019-07-06T10:28:40.448Z, origin=Only For Testing, session_id=6c9f895e-3d73-4eb3-a206-12095953e201, session_timestamp=2019-07-06T10:28:40.448Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[INFO ] 2019-07-06T10:28:42,293Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=0abc0dfa-5dba-48d0-b6ab-69382e53411a, invocation_id=6c9f895e-3d73-4eb3-a206-12095953e201, invocation_timestamp=2019-07-06T10:28:40.448Z, origin=Only For Testing, session_id=6c9f895e-3d73-4eb3-a206-12095953e201, session_timestamp=2019-07-06T10:28:40.448Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[INFO ] 2019-07-06T10:28:42,318Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=0abc0dfa-5dba-48d0-b6ab-69382e53411a, invocation_id=6c9f895e-3d73-4eb3-a206-12095953e201, invocation_timestamp=2019-07-06T10:28:40.448Z, origin=Only For Testing, session_id=6c9f895e-3d73-4eb3-a206-12095953e201, session_timestamp=2019-07-06T10:28:40.448Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[INFO ] 2019-07-06T10:28:42,377Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[WARN ] 2019-07-06T10:28:42,378Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[INFO ] 2019-07-06T10:28:42,390Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[INFO ] 2019-07-06T10:28:42,408Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=0abc0dfa-5dba-48d0-b6ab-69382e53411a, invocation_id=6c9f895e-3d73-4eb3-a206-12095953e201, invocation_timestamp=2019-07-06T10:28:40.448Z, origin=Only For Testing, session_id=6c9f895e-3d73-4eb3-a206-12095953e201, session_timestamp=2019-07-06T10:28:40.448Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[INFO ] 2019-07-06T10:28:42,409Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=0abc0dfa-5dba-48d0-b6ab-69382e53411a, invocation_id=6c9f895e-3d73-4eb3-a206-12095953e201, invocation_timestamp=2019-07-06T10:28:40.448Z, origin=Only For Testing, session_id=6c9f895e-3d73-4eb3-a206-12095953e201, session_timestamp=2019-07-06T10:28:40.448Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[INFO ] 2019-07-06T10:28:42,418Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:42,419Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [24efd19e-1bfd-495f-814b-71eb33464c0f] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7727473399269919321)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), frozenFiber=F8FE6D26921002864C7012C9B232AA63C97F14BB16A9C3F299F10AB35A1A44BA), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@273dbe64, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d7a66d], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=99eef51f-2a91-4d59-a894-0beec2e83095) {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[INFO ] 2019-07-06T10:28:42,419Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [24efd19e-1bfd-495f-814b-71eb33464c0f] has error [0] {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:42,424Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [24efd19e-1bfd-495f-814b-71eb33464c0f] error allowed to propagate {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[WARN ] 2019-07-06T10:28:42,432Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24efd19e-1bfd-495f-814b-71eb33464c0f] errored, dumping all transitions:

 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.359Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=A58C3FE35205B7372CD1FFCB1DC8360512C5D58201364A893993BF9C99B6375C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30bfff2e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30bfff2e])
    SignalFlowHasStarted(flowId=[24efd19e-1bfd-495f-814b-71eb33464c0f])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3133487374047794935), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7727473399269919321), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3133487374047794935-4907366450095607804-0-0), senderUUID=99eef51f-2a91-4d59-a894-0beec2e83095))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7727473399269919321): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935)), errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30bfff2e]
    []


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.360Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.360Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.365Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), maySkipCheckpoint=false, fiber=1E60734415BAB8C96F62F3F3EE9D37B1997812B34DB1D8470DC77268BEF37E19, )
  Actions: 
    PersistCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7727473399269919321)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935)), errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), frozenFiber=1E60734415BAB8C96F62F3F3EE9D37B1997812B34DB1D8470DC77268BEF37E19), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=A58C3FE35205B7372CD1FFCB1DC8360512C5D58201364A893993BF9C99B6375C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), frozenFiber=1E60734415BAB8C96F62F3F3EE9D37B1997812B34DB1D8470DC77268BEF37E19)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.374Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7727473399269919321).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.379Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.387Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=14C055A87D1F412CCDDF594BED025527F297A147BD0B8BB7C98E5A14EAA8A3A5, )
  Actions: 
    PersistCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7727473399269919321)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935)), errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=14C055A87D1F412CCDDF594BED025527F297A147BD0B8BB7C98E5A14EAA8A3A5), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    1E60734415BAB8C96F62F3F3EE9D37B1997812B34DB1D8470DC77268BEF37E19
    14C055A87D1F412CCDDF594BED025527F297A147BD0B8BB7C98E5A14EAA8A3A5
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.390Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3133487374047794935), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3133487374047794935-4907366450095607804-2-0), senderUUID=99eef51f-2a91-4d59-a894-0beec2e83095))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.390Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.396Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.400Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), maySkipCheckpoint=false, fiber=F8FE6D26921002864C7012C9B232AA63C97F14BB16A9C3F299F10AB35A1A44BA, )
  Actions: 
    PersistCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7727473399269919321)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935)), errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), frozenFiber=F8FE6D26921002864C7012C9B232AA63C97F14BB16A9C3F299F10AB35A1A44BA), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))])
checkpoint.flowState.frozenFiber.hash: 
    14C055A87D1F412CCDDF594BED025527F297A147BD0B8BB7C98E5A14EAA8A3A5
    F8FE6D26921002864C7012C9B232AA63C97F14BB16A9C3F299F10AB35A1A44BA
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.401Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.417Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7727473399269919321), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d7a66d, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7727473399269919321).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d7a66d]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.418Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.418Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.424Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4440701172272770247, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.424Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.425Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[WARN ] 2019-07-06T10:28:42,432Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24efd19e-1bfd-495f-814b-71eb33464c0f] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:28:42,432Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[WARN ] 2019-07-06T10:28:42,448Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24efd19e-1bfd-495f-814b-71eb33464c0f] errored, dumping all transitions:

 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.359Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=A58C3FE35205B7372CD1FFCB1DC8360512C5D58201364A893993BF9C99B6375C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30bfff2e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30bfff2e])
    SignalFlowHasStarted(flowId=[24efd19e-1bfd-495f-814b-71eb33464c0f])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3133487374047794935), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7727473399269919321), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3133487374047794935-4907366450095607804-0-0), senderUUID=99eef51f-2a91-4d59-a894-0beec2e83095))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7727473399269919321): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935)), errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30bfff2e]
    []


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.360Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.360Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.365Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), maySkipCheckpoint=false, fiber=1E60734415BAB8C96F62F3F3EE9D37B1997812B34DB1D8470DC77268BEF37E19, )
  Actions: 
    PersistCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7727473399269919321)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935)), errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), frozenFiber=1E60734415BAB8C96F62F3F3EE9D37B1997812B34DB1D8470DC77268BEF37E19), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=A58C3FE35205B7372CD1FFCB1DC8360512C5D58201364A893993BF9C99B6375C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), frozenFiber=1E60734415BAB8C96F62F3F3EE9D37B1997812B34DB1D8470DC77268BEF37E19)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.374Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7727473399269919321).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.379Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.387Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=14C055A87D1F412CCDDF594BED025527F297A147BD0B8BB7C98E5A14EAA8A3A5, )
  Actions: 
    PersistCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7727473399269919321)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935)), errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=14C055A87D1F412CCDDF594BED025527F297A147BD0B8BB7C98E5A14EAA8A3A5), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    1E60734415BAB8C96F62F3F3EE9D37B1997812B34DB1D8470DC77268BEF37E19
    14C055A87D1F412CCDDF594BED025527F297A147BD0B8BB7C98E5A14EAA8A3A5
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.390Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3133487374047794935), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3133487374047794935-4907366450095607804-2-0), senderUUID=99eef51f-2a91-4d59-a894-0beec2e83095))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.390Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.396Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.400Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), maySkipCheckpoint=false, fiber=F8FE6D26921002864C7012C9B232AA63C97F14BB16A9C3F299F10AB35A1A44BA, )
  Actions: 
    PersistCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7727473399269919321)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935)), errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), frozenFiber=F8FE6D26921002864C7012C9B232AA63C97F14BB16A9C3F299F10AB35A1A44BA), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))])
checkpoint.flowState.frozenFiber.hash: 
    14C055A87D1F412CCDDF594BED025527F297A147BD0B8BB7C98E5A14EAA8A3A5
    F8FE6D26921002864C7012C9B232AA63C97F14BB16A9C3F299F10AB35A1A44BA
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.401Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.417Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7727473399269919321), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d7a66d, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7727473399269919321).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-3133487374047794935))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d7a66d]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.418Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.418Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.424Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4440701172272770247, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.424Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.425Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [24efd19e-1bfd-495f-814b-71eb33464c0f] ---
  Timestamp: 2019-07-06T10:28:42.444Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-4440701172272770247)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)], senderUUID=99eef51f-2a91-4d59-a894-0beec2e83095)
    CreateTransaction
    RemoveCheckpoint(id=[24efd19e-1bfd-495f-814b-71eb33464c0f])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d7a66d])
    ReleaseSoftLocks(uuid=24efd19e-1bfd-495f-814b-71eb33464c0f)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d7a66d])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=7727473399269919321)])
    RemoveFlow(flowId=[24efd19e-1bfd-495f-814b-71eb33464c0f], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-4440701172272770247, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Invocation, sessionId=0acafc98-b78d-49c8-9fad-0921beac4371, timestamp: 2019-07-06T10:28:42.349Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7727473399269919321)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--3133487374047794935-4907366450095607804)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7727473399269919321))]), frozenFiber=F8FE6D26921002864C7012C9B232AA63C97F14BB16A9C3F299F10AB35A1A44BA), errorState=Errored(errors=[FlowError(errorId=-4440701172272770247, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@273dbe64, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=99eef51f-2a91-4d59-a894-0beec2e83095))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d7a66d]
    []
 {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
[WARN ] 2019-07-06T10:28:42,448Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24efd19e-1bfd-495f-814b-71eb33464c0f] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=24efd19e-1bfd-495f-814b-71eb33464c0f, invocation_id=0acafc98-b78d-49c8-9fad-0921beac4371, invocation_timestamp=2019-07-06T10:28:42.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0acafc98-b78d-49c8-9fad-0921beac4371, session_timestamp=2019-07-06T10:28:42.349Z, thread-id=194, tx_id=B03130320368DF33184050683B25A781B12F65A331C49195D4BA5CC5BE44691C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7727473399269919321) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:42,601Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102842.491/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:28:42,601Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102842.491/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:42,601Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102842.491/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:42,621Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:42,626Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:42,629Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:42,629Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:42,634Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:42.491Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:43,082Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:43,084Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102842.491/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:43,084Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:43,086Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:43,091Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:43,091Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:43,200Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:43,219Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:43,275Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:43,291Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:43,292Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:43,494Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:43,503Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:43,504Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408923504) {}
[INFO ] 2019-07-06T10:28:43,507Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:43,528Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408923504) {}
[INFO ] 2019-07-06T10:28:43,540Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:43,560Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408923504) {}
[INFO ] 2019-07-06T10:28:43,575Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:43,608Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:43,617Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:28:43,618Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:28:43,624Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408923504) {}
[INFO ] 2019-07-06T10:28:43,629Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408923504) {}
[INFO ] 2019-07-06T10:28:43,629Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:43,629Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408923504) {}
[INFO ] 2019-07-06T10:28:43,629Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:43,631Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102842.491/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:28:43,632Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102842.491/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:43,632Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102842.491/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:43,640Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:43,648Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:43,683Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:43,683Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:43,686Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:42.491Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:44,074Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:44,076Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102842.491/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:44,076Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:44,077Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:44,079Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:44,079Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:44,176Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:44,185Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:44,187Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:44,188Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:44,206Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:44,207Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:44,323Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:44,330Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:44,330Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408924330) {}
[INFO ] 2019-07-06T10:28:44,332Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:44,339Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408924330) {}
[INFO ] 2019-07-06T10:28:44,346Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:44,354Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408924330) {}
[INFO ] 2019-07-06T10:28:44,360Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:44,398Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:44,406Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408924330) {}
[INFO ] 2019-07-06T10:28:44,409Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408923504) {}
[INFO ] 2019-07-06T10:28:44,410Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:44,422Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408924330) {}
[INFO ] 2019-07-06T10:28:44,423Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:44,434Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408924330) {}
[INFO ] 2019-07-06T10:28:44,434Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:44,435Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408924330) {}
[INFO ] 2019-07-06T10:28:44,435Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:44,455Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102842.491/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:28:44,456Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102842.491/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:44,456Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102842.491/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:44,481Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:44,491Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:44,538Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:44,539Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:44,544Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:42.491Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:44,943Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:44,944Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102842.491/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:44,944Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:44,946Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:44,955Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:44,955Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:45,050Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:45,058Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:45,060Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:45,061Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:45,090Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:45,090Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:45,219Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:45,224Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:45,224Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408925224) {}
[INFO ] 2019-07-06T10:28:45,226Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:45,233Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408925224) {}
[INFO ] 2019-07-06T10:28:45,240Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:45,248Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408925224) {}
[INFO ] 2019-07-06T10:28:45,252Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:45,286Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:45,293Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408925224) {}
[INFO ] 2019-07-06T10:28:45,295Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408923504) {}
[INFO ] 2019-07-06T10:28:45,296Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:45,306Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408925224) {}
[INFO ] 2019-07-06T10:28:45,311Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:45,320Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408924330) {}
[INFO ] 2019-07-06T10:28:45,322Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:45,332Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408925224) {}
[INFO ] 2019-07-06T10:28:45,333Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:45,342Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408925224) {}
[INFO ] 2019-07-06T10:28:45,342Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:45,342Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408925224) {}
[INFO ] 2019-07-06T10:28:45,342Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:46,576Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=d0003861-8b0d-4a4c-afd1-3f2cb8caab2e, invocation_id=76b99315-0515-4810-8a46-8297e0f2c1ff, invocation_timestamp=2019-07-06T10:28:45.343Z, origin=Only For Testing, session_id=76b99315-0515-4810-8a46-8297e0f2c1ff, session_timestamp=2019-07-06T10:28:45.343Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[INFO ] 2019-07-06T10:28:46,578Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=d0003861-8b0d-4a4c-afd1-3f2cb8caab2e, invocation_id=76b99315-0515-4810-8a46-8297e0f2c1ff, invocation_timestamp=2019-07-06T10:28:45.343Z, origin=Only For Testing, session_id=76b99315-0515-4810-8a46-8297e0f2c1ff, session_timestamp=2019-07-06T10:28:45.343Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[INFO ] 2019-07-06T10:28:46,596Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=d0003861-8b0d-4a4c-afd1-3f2cb8caab2e, invocation_id=76b99315-0515-4810-8a46-8297e0f2c1ff, invocation_timestamp=2019-07-06T10:28:45.343Z, origin=Only For Testing, session_id=76b99315-0515-4810-8a46-8297e0f2c1ff, session_timestamp=2019-07-06T10:28:45.343Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[INFO ] 2019-07-06T10:28:46,658Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[WARN ] 2019-07-06T10:28:46,659Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[INFO ] 2019-07-06T10:28:46,671Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[INFO ] 2019-07-06T10:28:46,687Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=d0003861-8b0d-4a4c-afd1-3f2cb8caab2e, invocation_id=76b99315-0515-4810-8a46-8297e0f2c1ff, invocation_timestamp=2019-07-06T10:28:45.343Z, origin=Only For Testing, session_id=76b99315-0515-4810-8a46-8297e0f2c1ff, session_timestamp=2019-07-06T10:28:45.343Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[INFO ] 2019-07-06T10:28:46,687Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=d0003861-8b0d-4a4c-afd1-3f2cb8caab2e, invocation_id=76b99315-0515-4810-8a46-8297e0f2c1ff, invocation_timestamp=2019-07-06T10:28:45.343Z, origin=Only For Testing, session_id=76b99315-0515-4810-8a46-8297e0f2c1ff, session_timestamp=2019-07-06T10:28:45.343Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[INFO ] 2019-07-06T10:28:46,698Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:46,699Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [dad1baac-8499-4ab9-8df2-31df18d7f898] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3070266838570911919)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), frozenFiber=7A99EAECD29984DECB5E8379C4900B19E24DE301EB42DAD4454888C12A99F94A), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7ba68919, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b45f3d6], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=70103464-ed41-4d6e-841d-ada52ec0cd92) {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[INFO ] 2019-07-06T10:28:46,699Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [dad1baac-8499-4ab9-8df2-31df18d7f898] has error [0] {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:46,699Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [dad1baac-8499-4ab9-8df2-31df18d7f898] error allowed to propagate {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[WARN ] 2019-07-06T10:28:46,703Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dad1baac-8499-4ab9-8df2-31df18d7f898] errored, dumping all transitions:

 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.650Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9BA66DE21901FDC7DFF77CDA99953A5EFF2C6F94EE9F70BAA1B61CAD7838A44C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c02a90b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c02a90b])
    SignalFlowHasStarted(flowId=[dad1baac-8499-4ab9-8df2-31df18d7f898])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2583175291749202575), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3070266838570911919), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2583175291749202575--3418341303014205796-0-0), senderUUID=70103464-ed41-4d6e-841d-ada52ec0cd92))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3070266838570911919): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575)), errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c02a90b]
    []


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.650Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.650Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.655Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), maySkipCheckpoint=false, fiber=AB27868B5FC3682766A5F67D158A58B6524FC5DBB1146F0B86EB16A047EE9B43, )
  Actions: 
    PersistCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3070266838570911919)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575)), errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), frozenFiber=AB27868B5FC3682766A5F67D158A58B6524FC5DBB1146F0B86EB16A047EE9B43), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9BA66DE21901FDC7DFF77CDA99953A5EFF2C6F94EE9F70BAA1B61CAD7838A44C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), frozenFiber=AB27868B5FC3682766A5F67D158A58B6524FC5DBB1146F0B86EB16A047EE9B43)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.656Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3070266838570911919).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.659Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.666Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=539105EF63F48AD9CFA218D59A2F17BF6631E254DEC85DCA4F0F6FAAB32BAE1C, )
  Actions: 
    PersistCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3070266838570911919)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575)), errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=539105EF63F48AD9CFA218D59A2F17BF6631E254DEC85DCA4F0F6FAAB32BAE1C), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    AB27868B5FC3682766A5F67D158A58B6524FC5DBB1146F0B86EB16A047EE9B43
    539105EF63F48AD9CFA218D59A2F17BF6631E254DEC85DCA4F0F6FAAB32BAE1C
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.669Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2583175291749202575), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2583175291749202575--3418341303014205796-2-0), senderUUID=70103464-ed41-4d6e-841d-ada52ec0cd92))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.671Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.675Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.679Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), maySkipCheckpoint=false, fiber=7A99EAECD29984DECB5E8379C4900B19E24DE301EB42DAD4454888C12A99F94A, )
  Actions: 
    PersistCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3070266838570911919)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575)), errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), frozenFiber=7A99EAECD29984DECB5E8379C4900B19E24DE301EB42DAD4454888C12A99F94A), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))])
checkpoint.flowState.frozenFiber.hash: 
    539105EF63F48AD9CFA218D59A2F17BF6631E254DEC85DCA4F0F6FAAB32BAE1C
    7A99EAECD29984DECB5E8379C4900B19E24DE301EB42DAD4454888C12A99F94A
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.681Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.698Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3070266838570911919), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b45f3d6, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3070266838570911919).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b45f3d6]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.698Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.698Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.699Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8499902356195821478, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.699Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.700Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[WARN ] 2019-07-06T10:28:46,703Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dad1baac-8499-4ab9-8df2-31df18d7f898] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:28:46,704Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[WARN ] 2019-07-06T10:28:46,718Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dad1baac-8499-4ab9-8df2-31df18d7f898] errored, dumping all transitions:

 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.650Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9BA66DE21901FDC7DFF77CDA99953A5EFF2C6F94EE9F70BAA1B61CAD7838A44C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c02a90b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c02a90b])
    SignalFlowHasStarted(flowId=[dad1baac-8499-4ab9-8df2-31df18d7f898])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2583175291749202575), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3070266838570911919), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2583175291749202575--3418341303014205796-0-0), senderUUID=70103464-ed41-4d6e-841d-ada52ec0cd92))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3070266838570911919): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575)), errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c02a90b]
    []


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.650Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.650Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.655Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), maySkipCheckpoint=false, fiber=AB27868B5FC3682766A5F67D158A58B6524FC5DBB1146F0B86EB16A047EE9B43, )
  Actions: 
    PersistCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3070266838570911919)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575)), errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), frozenFiber=AB27868B5FC3682766A5F67D158A58B6524FC5DBB1146F0B86EB16A047EE9B43), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9BA66DE21901FDC7DFF77CDA99953A5EFF2C6F94EE9F70BAA1B61CAD7838A44C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), frozenFiber=AB27868B5FC3682766A5F67D158A58B6524FC5DBB1146F0B86EB16A047EE9B43)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.656Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3070266838570911919).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.659Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.666Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=539105EF63F48AD9CFA218D59A2F17BF6631E254DEC85DCA4F0F6FAAB32BAE1C, )
  Actions: 
    PersistCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3070266838570911919)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575)), errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=539105EF63F48AD9CFA218D59A2F17BF6631E254DEC85DCA4F0F6FAAB32BAE1C), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    AB27868B5FC3682766A5F67D158A58B6524FC5DBB1146F0B86EB16A047EE9B43
    539105EF63F48AD9CFA218D59A2F17BF6631E254DEC85DCA4F0F6FAAB32BAE1C
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.669Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2583175291749202575), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2583175291749202575--3418341303014205796-2-0), senderUUID=70103464-ed41-4d6e-841d-ada52ec0cd92))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.671Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.675Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.679Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), maySkipCheckpoint=false, fiber=7A99EAECD29984DECB5E8379C4900B19E24DE301EB42DAD4454888C12A99F94A, )
  Actions: 
    PersistCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3070266838570911919)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575)), errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), frozenFiber=7A99EAECD29984DECB5E8379C4900B19E24DE301EB42DAD4454888C12A99F94A), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))])
checkpoint.flowState.frozenFiber.hash: 
    539105EF63F48AD9CFA218D59A2F17BF6631E254DEC85DCA4F0F6FAAB32BAE1C
    7A99EAECD29984DECB5E8379C4900B19E24DE301EB42DAD4454888C12A99F94A
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.681Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.698Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3070266838570911919), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b45f3d6, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3070266838570911919).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2583175291749202575))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b45f3d6]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.698Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.698Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.699Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8499902356195821478, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.699Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.700Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [dad1baac-8499-4ab9-8df2-31df18d7f898] ---
  Timestamp: 2019-07-06T10:28:46.714Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-8499902356195821478)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)], senderUUID=70103464-ed41-4d6e-841d-ada52ec0cd92)
    CreateTransaction
    RemoveCheckpoint(id=[dad1baac-8499-4ab9-8df2-31df18d7f898])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b45f3d6])
    ReleaseSoftLocks(uuid=dad1baac-8499-4ab9-8df2-31df18d7f898)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b45f3d6])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=3070266838570911919)])
    RemoveFlow(flowId=[dad1baac-8499-4ab9-8df2-31df18d7f898], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-8499902356195821478, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Invocation, sessionId=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, timestamp: 2019-07-06T10:28:46.640Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3070266838570911919)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2583175291749202575--3418341303014205796)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3070266838570911919))]), frozenFiber=7A99EAECD29984DECB5E8379C4900B19E24DE301EB42DAD4454888C12A99F94A), errorState=Errored(errors=[FlowError(errorId=-8499902356195821478, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7ba68919, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=70103464-ed41-4d6e-841d-ada52ec0cd92))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b45f3d6]
    []
 {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
[WARN ] 2019-07-06T10:28:46,718Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dad1baac-8499-4ab9-8df2-31df18d7f898] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=dad1baac-8499-4ab9-8df2-31df18d7f898, invocation_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, invocation_timestamp=2019-07-06T10:28:46.640Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cf2d59c-1bb6-43b7-b16f-d6c8470e2dba, session_timestamp=2019-07-06T10:28:46.640Z, thread-id=283, tx_id=7F9C07BEBF19D31973D880869D8990383C1F27C4A9EA5FBA1ECF48F93E99826B}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3070266838570911919) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:46,832Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102846.737/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:28:46,834Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102846.737/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:46,835Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102846.737/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:46,857Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:46,862Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:46,866Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:46,866Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:46,871Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:46.737Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:47,306Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:47,308Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102846.737/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:47,308Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:47,309Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:47,313Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:47,314Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:47,400Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:47,408Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:47,437Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:47,445Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:47,445Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:47,561Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:47,566Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:47,566Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408927566) {}
[INFO ] 2019-07-06T10:28:47,568Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:47,583Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408927566) {}
[INFO ] 2019-07-06T10:28:47,593Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:47,605Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408927566) {}
[INFO ] 2019-07-06T10:28:47,612Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:47,641Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:47,643Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:28:47,644Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:28:47,653Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408927566) {}
[INFO ] 2019-07-06T10:28:47,657Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408927566) {}
[INFO ] 2019-07-06T10:28:47,657Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:47,657Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408927566) {}
[INFO ] 2019-07-06T10:28:47,657Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:47,659Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102846.737/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:28:47,660Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102846.737/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:47,660Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102846.737/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:47,683Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:47,695Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:47,802Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:47,804Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:47,814Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:46.737Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:48,167Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:48,169Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102846.737/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:48,169Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:48,170Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:48,172Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:48,172Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:48,294Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:48,303Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:48,305Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:48,306Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:48,372Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:48,372Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:48,494Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:48,500Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:48,500Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408928500) {}
[INFO ] 2019-07-06T10:28:48,502Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:48,508Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408928500) {}
[INFO ] 2019-07-06T10:28:48,514Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:48,522Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408928500) {}
[INFO ] 2019-07-06T10:28:48,531Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:48,560Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:48,572Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408928500) {}
[INFO ] 2019-07-06T10:28:48,574Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408927566) {}
[INFO ] 2019-07-06T10:28:48,575Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:48,584Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408928500) {}
[INFO ] 2019-07-06T10:28:48,585Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:48,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408928500) {}
[INFO ] 2019-07-06T10:28:48,594Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:48,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408928500) {}
[INFO ] 2019-07-06T10:28:48,594Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:48,597Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102846.737/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:28:48,597Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102846.737/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:48,598Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102846.737/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:48,618Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:48,628Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:48,691Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:48,692Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:48,698Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:46.737Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:49,027Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:49,028Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102846.737/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:49,029Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:49,030Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:49,032Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:49,032Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:49,115Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:49,122Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:49,124Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:49,125Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:49,146Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:49,146Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:49,245Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:49,249Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:49,250Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408929249) {}
[INFO ] 2019-07-06T10:28:49,251Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:49,258Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408929249) {}
[INFO ] 2019-07-06T10:28:49,265Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:49,280Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408929249) {}
[INFO ] 2019-07-06T10:28:49,285Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:49,311Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:49,324Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408929249) {}
[INFO ] 2019-07-06T10:28:49,328Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408927566) {}
[INFO ] 2019-07-06T10:28:49,330Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:49,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408929249) {}
[INFO ] 2019-07-06T10:28:49,342Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:49,351Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408928500) {}
[INFO ] 2019-07-06T10:28:49,354Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:49,363Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408929249) {}
[INFO ] 2019-07-06T10:28:49,365Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:49,374Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408929249) {}
[INFO ] 2019-07-06T10:28:49,374Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:49,374Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408929249) {}
[INFO ] 2019-07-06T10:28:49,374Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:50,876Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=0885964b-e128-482d-9280-b6afd3848305, invocation_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, invocation_timestamp=2019-07-06T10:28:49.375Z, origin=Only For Testing, session_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, session_timestamp=2019-07-06T10:28:49.375Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[INFO ] 2019-07-06T10:28:50,876Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=0885964b-e128-482d-9280-b6afd3848305, invocation_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, invocation_timestamp=2019-07-06T10:28:49.375Z, origin=Only For Testing, session_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, session_timestamp=2019-07-06T10:28:49.375Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[INFO ] 2019-07-06T10:28:50,893Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=0885964b-e128-482d-9280-b6afd3848305, invocation_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, invocation_timestamp=2019-07-06T10:28:49.375Z, origin=Only For Testing, session_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, session_timestamp=2019-07-06T10:28:49.375Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[INFO ] 2019-07-06T10:28:50,933Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[WARN ] 2019-07-06T10:28:50,934Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[INFO ] 2019-07-06T10:28:50,943Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[INFO ] 2019-07-06T10:28:50,956Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=0885964b-e128-482d-9280-b6afd3848305, invocation_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, invocation_timestamp=2019-07-06T10:28:49.375Z, origin=Only For Testing, session_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, session_timestamp=2019-07-06T10:28:49.375Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[INFO ] 2019-07-06T10:28:50,956Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=0885964b-e128-482d-9280-b6afd3848305, invocation_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, invocation_timestamp=2019-07-06T10:28:49.375Z, origin=Only For Testing, session_id=ef740330-b6d6-4c7c-a7b8-ca9abc7d9955, session_timestamp=2019-07-06T10:28:49.375Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[INFO ] 2019-07-06T10:28:50,964Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:50,965Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [dda3924b-9a29-423c-a582-00762d1ec813] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3975879017437974131)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), frozenFiber=60B76922B38293B0141C52446D0F94041554751F60719236EF9E7F803F4CE52A), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6006aa7c, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33459b5c], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=124d1f85-0118-422f-841c-49706214635b) {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[INFO ] 2019-07-06T10:28:50,965Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [dda3924b-9a29-423c-a582-00762d1ec813] has error [0] {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:50,965Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [dda3924b-9a29-423c-a582-00762d1ec813] error allowed to propagate {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[WARN ] 2019-07-06T10:28:50,971Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dda3924b-9a29-423c-a582-00762d1ec813] errored, dumping all transitions:

 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.927Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=0259737BDCCE95542A9E57CD195CC3ADB8992FB4440977FCA923BC8F60347899), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@675e46a2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@675e46a2])
    SignalFlowHasStarted(flowId=[dda3924b-9a29-423c-a582-00762d1ec813])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1793479484709075205), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3975879017437974131), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1793479484709075205--7653903301933120834-0-0), senderUUID=124d1f85-0118-422f-841c-49706214635b))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3975879017437974131): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1793479484709075205)), errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@675e46a2]
    []


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.927Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.927Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.930Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), maySkipCheckpoint=false, fiber=9A390AC0F4078B208BE35D2AAB4597186FEB7A5CD8D37C056981F12176F970E1, )
  Actions: 
    PersistCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3975879017437974131)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1793479484709075205)), errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), frozenFiber=9A390AC0F4078B208BE35D2AAB4597186FEB7A5CD8D37C056981F12176F970E1), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=0259737BDCCE95542A9E57CD195CC3ADB8992FB4440977FCA923BC8F60347899)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), frozenFiber=9A390AC0F4078B208BE35D2AAB4597186FEB7A5CD8D37C056981F12176F970E1)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.931Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3975879017437974131).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.934Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.941Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=F09B0277A2BFCAB5C1223860F7F4F224B944029A3B65D80412966CF62E856735, )
  Actions: 
    PersistCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3975879017437974131)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1793479484709075205)), errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=F09B0277A2BFCAB5C1223860F7F4F224B944029A3B65D80412966CF62E856735), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    9A390AC0F4078B208BE35D2AAB4597186FEB7A5CD8D37C056981F12176F970E1
    F09B0277A2BFCAB5C1223860F7F4F224B944029A3B65D80412966CF62E856735
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.943Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1793479484709075205), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1793479484709075205--7653903301933120834-2-0), senderUUID=124d1f85-0118-422f-841c-49706214635b))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.943Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.947Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.951Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), maySkipCheckpoint=false, fiber=60B76922B38293B0141C52446D0F94041554751F60719236EF9E7F803F4CE52A, )
  Actions: 
    PersistCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3975879017437974131)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1793479484709075205)), errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), frozenFiber=60B76922B38293B0141C52446D0F94041554751F60719236EF9E7F803F4CE52A), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))])
checkpoint.flowState.frozenFiber.hash: 
    F09B0277A2BFCAB5C1223860F7F4F224B944029A3B65D80412966CF62E856735
    60B76922B38293B0141C52446D0F94041554751F60719236EF9E7F803F4CE52A
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.951Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.964Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3975879017437974131), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33459b5c, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3975879017437974131).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=1793479484709075205))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33459b5c]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.964Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.964Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.966Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2308818373367277056, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.966Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.966Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[WARN ] 2019-07-06T10:28:50,971Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dda3924b-9a29-423c-a582-00762d1ec813] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:28:50,971Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[WARN ] 2019-07-06T10:28:50,982Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dda3924b-9a29-423c-a582-00762d1ec813] errored, dumping all transitions:

 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.927Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=0259737BDCCE95542A9E57CD195CC3ADB8992FB4440977FCA923BC8F60347899), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@675e46a2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@675e46a2])
    SignalFlowHasStarted(flowId=[dda3924b-9a29-423c-a582-00762d1ec813])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1793479484709075205), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3975879017437974131), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1793479484709075205--7653903301933120834-0-0), senderUUID=124d1f85-0118-422f-841c-49706214635b))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3975879017437974131): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1793479484709075205)), errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@675e46a2]
    []


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.927Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.927Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.930Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), maySkipCheckpoint=false, fiber=9A390AC0F4078B208BE35D2AAB4597186FEB7A5CD8D37C056981F12176F970E1, )
  Actions: 
    PersistCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3975879017437974131)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1793479484709075205)), errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), frozenFiber=9A390AC0F4078B208BE35D2AAB4597186FEB7A5CD8D37C056981F12176F970E1), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=0259737BDCCE95542A9E57CD195CC3ADB8992FB4440977FCA923BC8F60347899)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), frozenFiber=9A390AC0F4078B208BE35D2AAB4597186FEB7A5CD8D37C056981F12176F970E1)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.931Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3975879017437974131).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.934Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.941Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=F09B0277A2BFCAB5C1223860F7F4F224B944029A3B65D80412966CF62E856735, )
  Actions: 
    PersistCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3975879017437974131)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1793479484709075205)), errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=F09B0277A2BFCAB5C1223860F7F4F224B944029A3B65D80412966CF62E856735), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    9A390AC0F4078B208BE35D2AAB4597186FEB7A5CD8D37C056981F12176F970E1
    F09B0277A2BFCAB5C1223860F7F4F224B944029A3B65D80412966CF62E856735
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.943Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1793479484709075205), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1793479484709075205--7653903301933120834-2-0), senderUUID=124d1f85-0118-422f-841c-49706214635b))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.943Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.947Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.951Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), maySkipCheckpoint=false, fiber=60B76922B38293B0141C52446D0F94041554751F60719236EF9E7F803F4CE52A, )
  Actions: 
    PersistCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3975879017437974131)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1793479484709075205)), errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), frozenFiber=60B76922B38293B0141C52446D0F94041554751F60719236EF9E7F803F4CE52A), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))])
checkpoint.flowState.frozenFiber.hash: 
    F09B0277A2BFCAB5C1223860F7F4F224B944029A3B65D80412966CF62E856735
    60B76922B38293B0141C52446D0F94041554751F60719236EF9E7F803F4CE52A
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.951Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.964Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3975879017437974131), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33459b5c, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3975879017437974131).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=1793479484709075205))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33459b5c]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.964Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.964Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.966Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2308818373367277056, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.966Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.966Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [dda3924b-9a29-423c-a582-00762d1ec813] ---
  Timestamp: 2019-07-06T10:28:50.979Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2308818373367277056)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)], senderUUID=124d1f85-0118-422f-841c-49706214635b)
    CreateTransaction
    RemoveCheckpoint(id=[dda3924b-9a29-423c-a582-00762d1ec813])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33459b5c])
    ReleaseSoftLocks(uuid=dda3924b-9a29-423c-a582-00762d1ec813)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33459b5c])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-3975879017437974131)])
    RemoveFlow(flowId=[dda3924b-9a29-423c-a582-00762d1ec813], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2308818373367277056, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Invocation, sessionId=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, timestamp: 2019-07-06T10:28:50.918Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3975879017437974131)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-1793479484709075205--7653903301933120834)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3975879017437974131))]), frozenFiber=60B76922B38293B0141C52446D0F94041554751F60719236EF9E7F803F4CE52A), errorState=Errored(errors=[FlowError(errorId=2308818373367277056, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6006aa7c, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=124d1f85-0118-422f-841c-49706214635b))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33459b5c]
    []
 {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
[WARN ] 2019-07-06T10:28:50,982Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dda3924b-9a29-423c-a582-00762d1ec813] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=dda3924b-9a29-423c-a582-00762d1ec813, invocation_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, invocation_timestamp=2019-07-06T10:28:50.918Z, origin=O=Mock Company 1, L=London, C=GB, session_id=74f3dfd5-590b-4ef7-a7de-7e95469b4cb6, session_timestamp=2019-07-06T10:28:50.918Z, thread-id=372, tx_id=98DC49236C8468FEA9D2EB0B3DC5783A37C8BFAE846C732DAC7CA4889DA13A0E}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3975879017437974131) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:51,117Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102850.997/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:28:51,117Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102850.997/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:51,117Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102850.997/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:51,135Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:51,140Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:51,143Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:51,143Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:51,148Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:50.997Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:51,559Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:51,560Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102850.997/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:51,561Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:51,562Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:51,577Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:51,578Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:51,673Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:51,681Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:51,725Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:51,732Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:51,732Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:51,841Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:51,846Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:51,846Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408931846) {}
[INFO ] 2019-07-06T10:28:51,848Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:51,864Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408931846) {}
[INFO ] 2019-07-06T10:28:51,874Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:51,893Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408931846) {}
[INFO ] 2019-07-06T10:28:51,897Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:51,921Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:51,923Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:28:51,923Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:28:51,929Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408931846) {}
[INFO ] 2019-07-06T10:28:51,933Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408931846) {}
[INFO ] 2019-07-06T10:28:51,933Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:51,933Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408931846) {}
[INFO ] 2019-07-06T10:28:51,933Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:51,938Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102850.997/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:28:51,938Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102850.997/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:51,938Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102850.997/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:51,961Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:51,967Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:52,015Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:52,015Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:52,017Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:50.997Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:52,352Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:52,354Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102850.997/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:52,354Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:52,355Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:52,357Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:52,358Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:52,437Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:52,447Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:52,449Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:52,449Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:52,486Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:52,487Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:52,597Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:52,601Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:52,602Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408932601) {}
[INFO ] 2019-07-06T10:28:52,603Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:52,609Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408932601) {}
[INFO ] 2019-07-06T10:28:52,613Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:52,618Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408932601) {}
[INFO ] 2019-07-06T10:28:52,622Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:52,649Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:52,656Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408932601) {}
[INFO ] 2019-07-06T10:28:52,664Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408931846) {}
[INFO ] 2019-07-06T10:28:52,666Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:52,674Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408932601) {}
[INFO ] 2019-07-06T10:28:52,676Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:52,686Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408932601) {}
[INFO ] 2019-07-06T10:28:52,686Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:52,686Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408932601) {}
[INFO ] 2019-07-06T10:28:52,687Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:52,691Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102850.997/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:28:52,691Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102850.997/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:52,691Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102850.997/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:52,699Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:52,705Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:52,733Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:52,733Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:52,736Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:50.997Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:53,076Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:53,078Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102850.997/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:53,078Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:53,079Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:53,081Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:53,081Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:53,180Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:53,188Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:53,193Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:53,195Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:53,276Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:53,277Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:53,379Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:53,383Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:53,383Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408933383) {}
[INFO ] 2019-07-06T10:28:53,386Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:53,393Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408933383) {}
[INFO ] 2019-07-06T10:28:53,399Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:53,410Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408933383) {}
[INFO ] 2019-07-06T10:28:53,415Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:53,446Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:53,456Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408933383) {}
[INFO ] 2019-07-06T10:28:53,461Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408931846) {}
[INFO ] 2019-07-06T10:28:53,462Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:53,470Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408933383) {}
[INFO ] 2019-07-06T10:28:53,471Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:53,479Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408932601) {}
[INFO ] 2019-07-06T10:28:53,480Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:53,489Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408933383) {}
[INFO ] 2019-07-06T10:28:53,490Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:53,499Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408933383) {}
[INFO ] 2019-07-06T10:28:53,499Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:53,499Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408933383) {}
[INFO ] 2019-07-06T10:28:53,499Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:54,469Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=2014ad2f-86f2-4de1-bc28-3d528c60f940, invocation_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, invocation_timestamp=2019-07-06T10:28:53.504Z, origin=Only For Testing, session_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, session_timestamp=2019-07-06T10:28:53.504Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[INFO ] 2019-07-06T10:28:54,469Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=2014ad2f-86f2-4de1-bc28-3d528c60f940, invocation_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, invocation_timestamp=2019-07-06T10:28:53.504Z, origin=Only For Testing, session_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, session_timestamp=2019-07-06T10:28:53.504Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[INFO ] 2019-07-06T10:28:54,487Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=2014ad2f-86f2-4de1-bc28-3d528c60f940, invocation_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, invocation_timestamp=2019-07-06T10:28:53.504Z, origin=Only For Testing, session_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, session_timestamp=2019-07-06T10:28:53.504Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[INFO ] 2019-07-06T10:28:54,524Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[WARN ] 2019-07-06T10:28:54,524Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[INFO ] 2019-07-06T10:28:54,534Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[INFO ] 2019-07-06T10:28:54,550Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=2014ad2f-86f2-4de1-bc28-3d528c60f940, invocation_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, invocation_timestamp=2019-07-06T10:28:53.504Z, origin=Only For Testing, session_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, session_timestamp=2019-07-06T10:28:53.504Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[INFO ] 2019-07-06T10:28:54,550Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=2014ad2f-86f2-4de1-bc28-3d528c60f940, invocation_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, invocation_timestamp=2019-07-06T10:28:53.504Z, origin=Only For Testing, session_id=b61ef888-a28e-4129-9ecc-c2b0ec40f2c9, session_timestamp=2019-07-06T10:28:53.504Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[INFO ] 2019-07-06T10:28:54,558Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:54,559Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7827021582498000276)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), frozenFiber=F838EB8CD272A9E8438D8E839F1331A1F0A9B5989A455ACC7E23B6608980D9BB), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7e480ff6, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3bbfcc63], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=893c97eb-a52e-443b-b436-f2c9318f0aed) {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[INFO ] 2019-07-06T10:28:54,559Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] has error [0] {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:54,562Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] error allowed to propagate {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[WARN ] 2019-07-06T10:28:54,565Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] errored, dumping all transitions:

 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.517Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=C349517588BE65C2DE0FDB1E9AF00B25CFD62F84E3E69C18A006B2BC41EA3FDE), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@629ca03])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@629ca03])
    SignalFlowHasStarted(flowId=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5431562474698684470), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7827021582498000276), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5431562474698684470-5198845532714142048-0-0), senderUUID=893c97eb-a52e-443b-b436-f2c9318f0aed))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7827021582498000276): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470)), errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@629ca03]
    []


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.518Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.518Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.521Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), maySkipCheckpoint=false, fiber=CDAFB565341C1E126E19081F5BEEA795A834EADE7AA90E9195B281E7766A0A01, )
  Actions: 
    PersistCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7827021582498000276)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470)), errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), frozenFiber=CDAFB565341C1E126E19081F5BEEA795A834EADE7AA90E9195B281E7766A0A01), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=C349517588BE65C2DE0FDB1E9AF00B25CFD62F84E3E69C18A006B2BC41EA3FDE)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), frozenFiber=CDAFB565341C1E126E19081F5BEEA795A834EADE7AA90E9195B281E7766A0A01)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.521Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7827021582498000276).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.524Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.530Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=91F045E2921B47EA61163227DE727AA45F05AF67024B103C20D8B8665863FF9E, )
  Actions: 
    PersistCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7827021582498000276)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470)), errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=91F045E2921B47EA61163227DE727AA45F05AF67024B103C20D8B8665863FF9E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    CDAFB565341C1E126E19081F5BEEA795A834EADE7AA90E9195B281E7766A0A01
    91F045E2921B47EA61163227DE727AA45F05AF67024B103C20D8B8665863FF9E
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.533Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5431562474698684470), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5431562474698684470-5198845532714142048-2-0), senderUUID=893c97eb-a52e-443b-b436-f2c9318f0aed))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.534Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.539Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.542Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), maySkipCheckpoint=false, fiber=F838EB8CD272A9E8438D8E839F1331A1F0A9B5989A455ACC7E23B6608980D9BB, )
  Actions: 
    PersistCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7827021582498000276)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470)), errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), frozenFiber=F838EB8CD272A9E8438D8E839F1331A1F0A9B5989A455ACC7E23B6608980D9BB), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))])
checkpoint.flowState.frozenFiber.hash: 
    91F045E2921B47EA61163227DE727AA45F05AF67024B103C20D8B8665863FF9E
    F838EB8CD272A9E8438D8E839F1331A1F0A9B5989A455ACC7E23B6608980D9BB
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.544Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.557Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7827021582498000276), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3bbfcc63, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7827021582498000276).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3bbfcc63]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.558Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.558Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.562Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8522326053597468563, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.562Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.562Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[WARN ] 2019-07-06T10:28:54,565Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:28:54,565Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[WARN ] 2019-07-06T10:28:54,577Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] errored, dumping all transitions:

 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.517Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=C349517588BE65C2DE0FDB1E9AF00B25CFD62F84E3E69C18A006B2BC41EA3FDE), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@629ca03])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@629ca03])
    SignalFlowHasStarted(flowId=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5431562474698684470), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7827021582498000276), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5431562474698684470-5198845532714142048-0-0), senderUUID=893c97eb-a52e-443b-b436-f2c9318f0aed))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7827021582498000276): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470)), errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@629ca03]
    []


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.518Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.518Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.521Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), maySkipCheckpoint=false, fiber=CDAFB565341C1E126E19081F5BEEA795A834EADE7AA90E9195B281E7766A0A01, )
  Actions: 
    PersistCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7827021582498000276)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470)), errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), frozenFiber=CDAFB565341C1E126E19081F5BEEA795A834EADE7AA90E9195B281E7766A0A01), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=C349517588BE65C2DE0FDB1E9AF00B25CFD62F84E3E69C18A006B2BC41EA3FDE)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), frozenFiber=CDAFB565341C1E126E19081F5BEEA795A834EADE7AA90E9195B281E7766A0A01)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.521Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7827021582498000276).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.524Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.530Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=91F045E2921B47EA61163227DE727AA45F05AF67024B103C20D8B8665863FF9E, )
  Actions: 
    PersistCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7827021582498000276)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470)), errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=91F045E2921B47EA61163227DE727AA45F05AF67024B103C20D8B8665863FF9E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    CDAFB565341C1E126E19081F5BEEA795A834EADE7AA90E9195B281E7766A0A01
    91F045E2921B47EA61163227DE727AA45F05AF67024B103C20D8B8665863FF9E
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.533Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5431562474698684470), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5431562474698684470-5198845532714142048-2-0), senderUUID=893c97eb-a52e-443b-b436-f2c9318f0aed))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.534Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.539Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.542Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), maySkipCheckpoint=false, fiber=F838EB8CD272A9E8438D8E839F1331A1F0A9B5989A455ACC7E23B6608980D9BB, )
  Actions: 
    PersistCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7827021582498000276)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470)), errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), frozenFiber=F838EB8CD272A9E8438D8E839F1331A1F0A9B5989A455ACC7E23B6608980D9BB), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))])
checkpoint.flowState.frozenFiber.hash: 
    91F045E2921B47EA61163227DE727AA45F05AF67024B103C20D8B8665863FF9E
    F838EB8CD272A9E8438D8E839F1331A1F0A9B5989A455ACC7E23B6608980D9BB
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.544Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.557Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7827021582498000276), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3bbfcc63, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7827021582498000276).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5431562474698684470))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3bbfcc63]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.558Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.558Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.562Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8522326053597468563, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.562Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.562Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] ---
  Timestamp: 2019-07-06T10:28:54.574Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8522326053597468563)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)], senderUUID=893c97eb-a52e-443b-b436-f2c9318f0aed)
    CreateTransaction
    RemoveCheckpoint(id=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3bbfcc63])
    ReleaseSoftLocks(uuid=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3bbfcc63])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=7827021582498000276)])
    RemoveFlow(flowId=[8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8522326053597468563, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Invocation, sessionId=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, timestamp: 2019-07-06T10:28:54.508Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7827021582498000276)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5431562474698684470-5198845532714142048)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7827021582498000276))]), frozenFiber=F838EB8CD272A9E8438D8E839F1331A1F0A9B5989A455ACC7E23B6608980D9BB), errorState=Errored(errors=[FlowError(errorId=8522326053597468563, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7e480ff6, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=893c97eb-a52e-443b-b436-f2c9318f0aed))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3bbfcc63]
    []
 {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
[WARN ] 2019-07-06T10:28:54,577Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=8c36c3cf-b359-4d4d-8b27-c6d16e00f7e1, invocation_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, invocation_timestamp=2019-07-06T10:28:54.508Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25b8521b-f4e7-4ec2-bafd-07ff3fed6f2a, session_timestamp=2019-07-06T10:28:54.508Z, thread-id=462, tx_id=2B6285CCA3F9ADF1D2E273FBB67D5B94C0F84319D598435D5B08DF47381DAD7A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7827021582498000276) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:54,739Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102854.617/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:28:54,740Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102854.617/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:54,741Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102854.617/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:54,752Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:54,761Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:54,764Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:54,764Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:54,770Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:54.616Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:55,121Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:55,123Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102854.617/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:55,123Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:55,124Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:55,126Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,126Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,190Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,198Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:55,221Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:55,228Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,228Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,328Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,333Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:55,334Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408935333) {}
[INFO ] 2019-07-06T10:28:55,335Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:55,347Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408935333) {}
[INFO ] 2019-07-06T10:28:55,360Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:55,368Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408935333) {}
[INFO ] 2019-07-06T10:28:55,377Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:55,399Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:55,401Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:28:55,401Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:28:55,410Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408935333) {}
[INFO ] 2019-07-06T10:28:55,413Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408935333) {}
[INFO ] 2019-07-06T10:28:55,413Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:55,413Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408935333) {}
[INFO ] 2019-07-06T10:28:55,413Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:55,415Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102854.617/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:28:55,415Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102854.617/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:55,416Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102854.617/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:55,438Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:55,446Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:55,481Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:55,482Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:55,485Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:54.616Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:55,847Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:55,849Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102854.617/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:55,849Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:55,850Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:55,853Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,854Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,935Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:55,943Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:55,945Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:55,945Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:55,961Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:55,961Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:56,037Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:56,042Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:56,042Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408936042) {}
[INFO ] 2019-07-06T10:28:56,043Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:56,049Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408936042) {}
[INFO ] 2019-07-06T10:28:56,053Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:56,063Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408936042) {}
[INFO ] 2019-07-06T10:28:56,075Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:56,103Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:56,113Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408936042) {}
[INFO ] 2019-07-06T10:28:56,115Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408935333) {}
[INFO ] 2019-07-06T10:28:56,117Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:56,125Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408936042) {}
[INFO ] 2019-07-06T10:28:56,128Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:56,135Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408936042) {}
[INFO ] 2019-07-06T10:28:56,136Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:56,136Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408936042) {}
[INFO ] 2019-07-06T10:28:56,136Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:56,139Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-102854.617/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:28:56,139Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102854.617/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:28:56,139Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-102854.617/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:28:56,169Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:28:56,173Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:28:56,212Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:56,213Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:28:56,215Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:28:54.616Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:28:56,537Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:28:56,539Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-102854.617/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:28:56,539Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:28:56,539Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:28:56,541Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:56,541Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:56,613Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:28:56,619Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:28:56,621Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:28:56,621Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:28:56,656Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:56,656Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:56,747Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:28:56,752Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:28:56,752Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408936752) {}
[INFO ] 2019-07-06T10:28:56,754Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:56,759Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408936752) {}
[INFO ] 2019-07-06T10:28:56,764Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:28:56,779Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408936752) {}
[INFO ] 2019-07-06T10:28:56,785Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:56,812Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:28:56,818Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408936752) {}
[INFO ] 2019-07-06T10:28:56,828Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562408935333) {}
[INFO ] 2019-07-06T10:28:56,829Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:56,836Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408936752) {}
[INFO ] 2019-07-06T10:28:56,837Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:56,844Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562408936042) {}
[INFO ] 2019-07-06T10:28:56,845Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:56,853Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408936752) {}
[INFO ] 2019-07-06T10:28:56,854Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:28:56,859Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408936752) {}
[INFO ] 2019-07-06T10:28:56,859Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:56,859Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562408936752) {}
[INFO ] 2019-07-06T10:28:56,859Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:28:58,128Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=7e5875a3-a6d2-4b75-98a9-bf68eb4b92cc, invocation_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, invocation_timestamp=2019-07-06T10:28:56.860Z, origin=Only For Testing, session_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, session_timestamp=2019-07-06T10:28:56.860Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[INFO ] 2019-07-06T10:28:58,128Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=7e5875a3-a6d2-4b75-98a9-bf68eb4b92cc, invocation_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, invocation_timestamp=2019-07-06T10:28:56.860Z, origin=Only For Testing, session_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, session_timestamp=2019-07-06T10:28:56.860Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[INFO ] 2019-07-06T10:28:58,142Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=7e5875a3-a6d2-4b75-98a9-bf68eb4b92cc, invocation_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, invocation_timestamp=2019-07-06T10:28:56.860Z, origin=Only For Testing, session_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, session_timestamp=2019-07-06T10:28:56.860Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[INFO ] 2019-07-06T10:28:58,177Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[WARN ] 2019-07-06T10:28:58,177Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[INFO ] 2019-07-06T10:28:58,185Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[INFO ] 2019-07-06T10:28:58,199Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=7e5875a3-a6d2-4b75-98a9-bf68eb4b92cc, invocation_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, invocation_timestamp=2019-07-06T10:28:56.860Z, origin=Only For Testing, session_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, session_timestamp=2019-07-06T10:28:56.860Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[INFO ] 2019-07-06T10:28:58,199Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=7e5875a3-a6d2-4b75-98a9-bf68eb4b92cc, invocation_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, invocation_timestamp=2019-07-06T10:28:56.860Z, origin=Only For Testing, session_id=8fad3640-7eeb-4d0c-9907-d22cf9806370, session_timestamp=2019-07-06T10:28:56.860Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[INFO ] 2019-07-06T10:28:58,205Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:58,205Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6899523064482633704)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), frozenFiber=FDA729613BD2159626B834361536B963FF567F5AD0DE9EB7460B99A520DC154C), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@72759f07, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f077af7], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=77e01552-4bd8-4e21-9fb0-dd12ac1611ad) {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[INFO ] 2019-07-06T10:28:58,206Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] has error [0] {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:28:58,206Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] error allowed to propagate {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[WARN ] 2019-07-06T10:28:58,212Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] errored, dumping all transitions:

 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.170Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=65F2B021830EB3DB8CEB93B4EB36D94DC4AEE9EC49912B2F28B748E6ACE4ED05), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6bceb2fe])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6bceb2fe])
    SignalFlowHasStarted(flowId=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6925580134244370930), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6899523064482633704), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6925580134244370930--7095519883350151463-0-0), senderUUID=77e01552-4bd8-4e21-9fb0-dd12ac1611ad))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6899523064482633704): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930)), errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6bceb2fe]
    []


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.170Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.171Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.174Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), maySkipCheckpoint=false, fiber=3F983E60FBBCC3AE61E27E08CED4C9978311F1B6B3346C4EA5D410DC83131A77, )
  Actions: 
    PersistCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6899523064482633704)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930)), errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), frozenFiber=3F983E60FBBCC3AE61E27E08CED4C9978311F1B6B3346C4EA5D410DC83131A77), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=65F2B021830EB3DB8CEB93B4EB36D94DC4AEE9EC49912B2F28B748E6ACE4ED05)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), frozenFiber=3F983E60FBBCC3AE61E27E08CED4C9978311F1B6B3346C4EA5D410DC83131A77)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.174Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6899523064482633704).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.177Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.183Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=34CF412613BE9B0181C768C806C2E926AB60EA2B590B2E0887003FBA3557B002, )
  Actions: 
    PersistCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6899523064482633704)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930)), errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=34CF412613BE9B0181C768C806C2E926AB60EA2B590B2E0887003FBA3557B002), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    3F983E60FBBCC3AE61E27E08CED4C9978311F1B6B3346C4EA5D410DC83131A77
    34CF412613BE9B0181C768C806C2E926AB60EA2B590B2E0887003FBA3557B002
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.185Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6925580134244370930), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6925580134244370930--7095519883350151463-2-0), senderUUID=77e01552-4bd8-4e21-9fb0-dd12ac1611ad))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.185Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.190Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.193Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), maySkipCheckpoint=false, fiber=FDA729613BD2159626B834361536B963FF567F5AD0DE9EB7460B99A520DC154C, )
  Actions: 
    PersistCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6899523064482633704)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930)), errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), frozenFiber=FDA729613BD2159626B834361536B963FF567F5AD0DE9EB7460B99A520DC154C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))])
checkpoint.flowState.frozenFiber.hash: 
    34CF412613BE9B0181C768C806C2E926AB60EA2B590B2E0887003FBA3557B002
    FDA729613BD2159626B834361536B963FF567F5AD0DE9EB7460B99A520DC154C
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.193Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.204Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6899523064482633704), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f077af7, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6899523064482633704).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f077af7]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.205Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.205Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.206Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=30508579584267677, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.206Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.208Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[WARN ] 2019-07-06T10:28:58,212Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:28:58,212Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[WARN ] 2019-07-06T10:28:58,225Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] errored, dumping all transitions:

 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.170Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=65F2B021830EB3DB8CEB93B4EB36D94DC4AEE9EC49912B2F28B748E6ACE4ED05), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6bceb2fe])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6bceb2fe])
    SignalFlowHasStarted(flowId=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6925580134244370930), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6899523064482633704), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6925580134244370930--7095519883350151463-0-0), senderUUID=77e01552-4bd8-4e21-9fb0-dd12ac1611ad))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6899523064482633704): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930)), errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6bceb2fe]
    []


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.170Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.171Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.174Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), maySkipCheckpoint=false, fiber=3F983E60FBBCC3AE61E27E08CED4C9978311F1B6B3346C4EA5D410DC83131A77, )
  Actions: 
    PersistCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6899523064482633704)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930)), errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), frozenFiber=3F983E60FBBCC3AE61E27E08CED4C9978311F1B6B3346C4EA5D410DC83131A77), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=65F2B021830EB3DB8CEB93B4EB36D94DC4AEE9EC49912B2F28B748E6ACE4ED05)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), frozenFiber=3F983E60FBBCC3AE61E27E08CED4C9978311F1B6B3346C4EA5D410DC83131A77)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.174Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6899523064482633704).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.177Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.183Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=34CF412613BE9B0181C768C806C2E926AB60EA2B590B2E0887003FBA3557B002, )
  Actions: 
    PersistCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6899523064482633704)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930)), errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=34CF412613BE9B0181C768C806C2E926AB60EA2B590B2E0887003FBA3557B002), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    3F983E60FBBCC3AE61E27E08CED4C9978311F1B6B3346C4EA5D410DC83131A77
    34CF412613BE9B0181C768C806C2E926AB60EA2B590B2E0887003FBA3557B002
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.185Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6925580134244370930), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6925580134244370930--7095519883350151463-2-0), senderUUID=77e01552-4bd8-4e21-9fb0-dd12ac1611ad))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.185Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.190Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.193Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), maySkipCheckpoint=false, fiber=FDA729613BD2159626B834361536B963FF567F5AD0DE9EB7460B99A520DC154C, )
  Actions: 
    PersistCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6899523064482633704)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930)), errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), frozenFiber=FDA729613BD2159626B834361536B963FF567F5AD0DE9EB7460B99A520DC154C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))])
checkpoint.flowState.frozenFiber.hash: 
    34CF412613BE9B0181C768C806C2E926AB60EA2B590B2E0887003FBA3557B002
    FDA729613BD2159626B834361536B963FF567F5AD0DE9EB7460B99A520DC154C
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.193Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.204Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6899523064482633704), payload=net.corda.node.services.statemachine.EndSessionMessage@73102eca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f077af7, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6899523064482633704).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6925580134244370930))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f077af7]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.205Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.205Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.206Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=30508579584267677, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.206Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.208Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] ---
  Timestamp: 2019-07-06T10:28:58.222Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=30508579584267677)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)], senderUUID=77e01552-4bd8-4e21-9fb0-dd12ac1611ad)
    CreateTransaction
    RemoveCheckpoint(id=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f077af7])
    ReleaseSoftLocks(uuid=df4ca3db-4a78-4aa2-8ba5-4a919ef10480)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f077af7])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-6899523064482633704)])
    RemoveFlow(flowId=[df4ca3db-4a78-4aa2-8ba5-4a919ef10480], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=30508579584267677, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Invocation, sessionId=11a470e8-cb39-432c-9fb0-5f89ca1186f3, timestamp: 2019-07-06T10:28:58.162Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6899523064482633704)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6925580134244370930--7095519883350151463)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6899523064482633704))]), frozenFiber=FDA729613BD2159626B834361536B963FF567F5AD0DE9EB7460B99A520DC154C), errorState=Errored(errors=[FlowError(errorId=30508579584267677, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@72759f07, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=77e01552-4bd8-4e21-9fb0-dd12ac1611ad))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f077af7]
    []
 {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
[WARN ] 2019-07-06T10:28:58,225Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [df4ca3db-4a78-4aa2-8ba5-4a919ef10480] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=df4ca3db-4a78-4aa2-8ba5-4a919ef10480, invocation_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, invocation_timestamp=2019-07-06T10:28:58.162Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11a470e8-cb39-432c-9fb0-5f89ca1186f3, session_timestamp=2019-07-06T10:28:58.162Z, thread-id=551, tx_id=8C100846C9ECC5A8ECC731E2753A0E921F55AEBCAEDAA3B243E13BF1E7058384}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6899523064482633704) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:31:20,789Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/dienigma/work/bootcamp-cordapp ... {}
[INFO ] 2019-07-06T10:31:22,188Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103117.945/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:31:22,190Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103117.945/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:31:22,203Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103117.945/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:31:22,275Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:31:22,519Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:31:22,569Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:22,570Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:22,703Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:31:17.926Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:31:36,054Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:31:36,059Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103117.945/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:31:36,059Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:31:36,061Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:31:36,107Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:36,112Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:37,419Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:37,829Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:31:37,952Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:31:37,980Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:37,981Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:38,405Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:38,419Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:31:38,420Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409098420) {}
[INFO ] 2019-07-06T10:31:38,427Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:31:38,625Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409098420) {}
[INFO ] 2019-07-06T10:31:38,684Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:31:38,725Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409098420) {}
[INFO ] 2019-07-06T10:31:38,774Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:31:38,804Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:31:38,808Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:31:38,811Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:31:39,168Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103139.035/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:31:39,169Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103139.035/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:31:39,169Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103139.035/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:31:39,192Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:31:39,204Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:31:39,208Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:39,209Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:39,217Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:31:39.035Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:31:39,910Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:31:39,913Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103139.035/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:31:39,913Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:31:39,914Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:31:39,917Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:39,917Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:40,075Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:40,089Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:31:40,130Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:31:40,140Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:40,140Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:40,309Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:40,315Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:31:40,315Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409100315) {}
[INFO ] 2019-07-06T10:31:40,318Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:31:40,389Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409100315) {}
[INFO ] 2019-07-06T10:31:40,411Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:31:40,422Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409100315) {}
[INFO ] 2019-07-06T10:31:40,438Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:31:40,482Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:31:40,484Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:31:40,484Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:31:40,583Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103140.494/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:31:40,584Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103140.494/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:31:40,584Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103140.494/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:31:40,605Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:31:40,620Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:31:40,624Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:40,626Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:40,635Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:31:40.494Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:31:41,231Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:31:41,233Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103140.494/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:31:41,233Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:31:41,234Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:31:41,237Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:41,237Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:41,351Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:41,362Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:31:41,395Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:31:41,404Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:41,404Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:41,568Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:41,574Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:31:41,574Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409101574) {}
[INFO ] 2019-07-06T10:31:41,578Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:31:41,600Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409101574) {}
[INFO ] 2019-07-06T10:31:41,615Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:31:41,628Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409101574) {}
[INFO ] 2019-07-06T10:31:41,638Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:31:41,683Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:31:41,686Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:31:41,686Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:31:41,782Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103141.701/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:31:41,782Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103141.701/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:31:41,782Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103141.701/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:31:41,803Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:31:41,808Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:31:41,811Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:41,811Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:41,818Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:31:41.701Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:31:42,356Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:31:42,362Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103141.701/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:31:42,362Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:31:42,365Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:31:42,373Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:42,373Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:42,480Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:42,490Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:31:42,530Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:31:42,540Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:42,541Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:42,731Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:42,738Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:31:42,738Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409102738) {}
[INFO ] 2019-07-06T10:31:42,741Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:31:42,762Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409102738) {}
[INFO ] 2019-07-06T10:31:42,777Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:31:42,784Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409102738) {}
[INFO ] 2019-07-06T10:31:42,807Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:31:42,839Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:31:42,841Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:31:42,841Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:31:42,963Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103142.856/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:31:42,964Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103142.856/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:31:42,965Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103142.856/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:31:42,988Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:31:42,994Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:31:42,997Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:42,997Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:43,004Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:31:42.856Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:31:43,530Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:31:43,536Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103142.856/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:31:43,537Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:31:43,539Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:31:43,541Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:43,541Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:43,660Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:43,676Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:31:43,727Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:31:43,736Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:43,736Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:43,911Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:43,918Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:31:43,919Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409103919) {}
[INFO ] 2019-07-06T10:31:43,922Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:31:43,943Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409103919) {}
[INFO ] 2019-07-06T10:31:43,957Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:31:43,970Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409103919) {}
[INFO ] 2019-07-06T10:31:43,986Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:31:44,036Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:31:44,039Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:31:44,040Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:31:44,160Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103144.054/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:31:44,160Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103144.054/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:31:44,161Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103144.054/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:31:44,182Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:31:44,190Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:31:44,194Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:44,195Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:31:44,204Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:31:44.054Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:31:44,802Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:31:44,805Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103144.054/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:31:44,805Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:31:44,806Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:31:44,808Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:44,808Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:44,915Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:31:44,925Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:31:44,956Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:31:44,965Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:44,965Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:45,107Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:31:45,113Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:31:45,113Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409105113) {}
[INFO ] 2019-07-06T10:31:45,116Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:31:45,133Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409105113) {}
[INFO ] 2019-07-06T10:31:45,145Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:31:45,161Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409105113) {}
[INFO ] 2019-07-06T10:31:45,179Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:31:45,208Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:31:45,210Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:31:45,211Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:32:20,054Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/dienigma/work/bootcamp-cordapp ... {}
[INFO ] 2019-07-06T10:32:22,097Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103214.070/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:32:22,103Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103214.070/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:22,137Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103214.070/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:22,238Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:23,179Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:23,300Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:23,301Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:23,527Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:13.809Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:39,289Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:39,293Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103214.070/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:39,293Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:39,295Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:39,368Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:39,374Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:41,742Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:42,400Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:42,475Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:42,493Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:42,493Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:42,868Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:42,881Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:42,882Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409162881) {}
[INFO ] 2019-07-06T10:32:42,888Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:43,058Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409162881) {}
[INFO ] 2019-07-06T10:32:43,132Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:43,157Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409162881) {}
[INFO ] 2019-07-06T10:32:43,208Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:43,255Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:43,261Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:32:43,267Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:32:43,645Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409162881) {}
[INFO ] 2019-07-06T10:32:43,674Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409162881) {}
[INFO ] 2019-07-06T10:32:43,677Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:43,679Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409162881) {}
[INFO ] 2019-07-06T10:32:43,679Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:43,685Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103214.070/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:32:43,686Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103214.070/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:43,686Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103214.070/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:43,724Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:43,735Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:43,775Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:43,775Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:43,781Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:13.809Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:44,399Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:44,403Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103214.070/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:44,404Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:44,407Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:44,409Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:44,410Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:44,569Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:44,584Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:44,587Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:44,588Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:32:44,612Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:44,613Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:44,803Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:44,810Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:44,810Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409164810) {}
[INFO ] 2019-07-06T10:32:44,813Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:44,823Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409164810) {}
[INFO ] 2019-07-06T10:32:44,834Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:44,847Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409164810) {}
[INFO ] 2019-07-06T10:32:44,872Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:44,898Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:44,910Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409164810) {}
[INFO ] 2019-07-06T10:32:44,913Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409162881) {}
[INFO ] 2019-07-06T10:32:44,915Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:44,931Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409164810) {}
[INFO ] 2019-07-06T10:32:44,933Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:44,947Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409164810) {}
[INFO ] 2019-07-06T10:32:44,947Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:44,947Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409164810) {}
[INFO ] 2019-07-06T10:32:44,947Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:44,950Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103214.070/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:32:44,950Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103214.070/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:44,950Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103214.070/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:44,974Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:44,982Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:45,026Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:45,028Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:45,033Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:13.809Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:45,512Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:45,514Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103214.070/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:45,515Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:45,516Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:45,519Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:45,520Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:45,628Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:45,645Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:45,653Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:45,654Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:32:45,682Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:45,682Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:45,837Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:45,844Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:45,845Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409165845) {}
[INFO ] 2019-07-06T10:32:45,848Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:45,857Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409165845) {}
[INFO ] 2019-07-06T10:32:45,867Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:45,872Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409165845) {}
[INFO ] 2019-07-06T10:32:45,887Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:45,926Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:45,940Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409165845) {}
[INFO ] 2019-07-06T10:32:45,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409162881) {}
[INFO ] 2019-07-06T10:32:45,946Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:45,962Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409165845) {}
[INFO ] 2019-07-06T10:32:45,965Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:45,981Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409164810) {}
[INFO ] 2019-07-06T10:32:45,984Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:45,998Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409165845) {}
[INFO ] 2019-07-06T10:32:46,000Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:46,013Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409165845) {}
[INFO ] 2019-07-06T10:32:46,013Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:46,013Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409165845) {}
[INFO ] 2019-07-06T10:32:46,013Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-06T10:32:46,272Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ac0f293-ddbf-42d9-9589-b9df7636d7ed, invocation_id=bafeeeec-cf4e-415b-b32c-e04243676c15, invocation_timestamp=2019-07-06T10:32:46.053Z, origin=Only For Testing, session_id=bafeeeec-cf4e-415b-b32c-e04243676c15, session_timestamp=2019-07-06T10:32:46.053Z, thread-id=102}
[WARN ] 2019-07-06T10:32:46,272Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ac0f293-ddbf-42d9-9589-b9df7636d7ed, invocation_id=bafeeeec-cf4e-415b-b32c-e04243676c15, invocation_timestamp=2019-07-06T10:32:46.053Z, origin=Only For Testing, session_id=bafeeeec-cf4e-415b-b32c-e04243676c15, session_timestamp=2019-07-06T10:32:46.053Z, thread-id=102}
[INFO ] 2019-07-06T10:32:48,254Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ac0f293-ddbf-42d9-9589-b9df7636d7ed, invocation_id=bafeeeec-cf4e-415b-b32c-e04243676c15, invocation_timestamp=2019-07-06T10:32:46.053Z, origin=Only For Testing, session_id=bafeeeec-cf4e-415b-b32c-e04243676c15, session_timestamp=2019-07-06T10:32:46.053Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[INFO ] 2019-07-06T10:32:48,254Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ac0f293-ddbf-42d9-9589-b9df7636d7ed, invocation_id=bafeeeec-cf4e-415b-b32c-e04243676c15, invocation_timestamp=2019-07-06T10:32:46.053Z, origin=Only For Testing, session_id=bafeeeec-cf4e-415b-b32c-e04243676c15, session_timestamp=2019-07-06T10:32:46.053Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[INFO ] 2019-07-06T10:32:48,330Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ac0f293-ddbf-42d9-9589-b9df7636d7ed, invocation_id=bafeeeec-cf4e-415b-b32c-e04243676c15, invocation_timestamp=2019-07-06T10:32:46.053Z, origin=Only For Testing, session_id=bafeeeec-cf4e-415b-b32c-e04243676c15, session_timestamp=2019-07-06T10:32:46.053Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[INFO ] 2019-07-06T10:32:48,580Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[WARN ] 2019-07-06T10:32:48,592Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[INFO ] 2019-07-06T10:32:48,650Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[INFO ] 2019-07-06T10:32:48,692Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ac0f293-ddbf-42d9-9589-b9df7636d7ed, invocation_id=bafeeeec-cf4e-415b-b32c-e04243676c15, invocation_timestamp=2019-07-06T10:32:46.053Z, origin=Only For Testing, session_id=bafeeeec-cf4e-415b-b32c-e04243676c15, session_timestamp=2019-07-06T10:32:46.053Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[INFO ] 2019-07-06T10:32:48,692Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ac0f293-ddbf-42d9-9589-b9df7636d7ed, invocation_id=bafeeeec-cf4e-415b-b32c-e04243676c15, invocation_timestamp=2019-07-06T10:32:46.053Z, origin=Only For Testing, session_id=bafeeeec-cf4e-415b-b32c-e04243676c15, session_timestamp=2019-07-06T10:32:46.053Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[INFO ] 2019-07-06T10:32:48,741Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:48,750Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4124208991183535777)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), frozenFiber=6DCD2F0603042EF02D5CDF81BB5B21A66DCE6006C15EC4A3B55B6870FB80527E), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@681ce8a, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5acac5bd], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=4a865a82-cdd3-4356-849c-b5652086c0e9) {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[INFO ] 2019-07-06T10:32:48,753Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] has error [0] {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:48,755Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] error allowed to propagate {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[WARN ] 2019-07-06T10:32:48,802Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] errored, dumping all transitions:

 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.542Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2D3C2AAD996C3A84C493D272E2153EF76DA8A5E69D7DD8BB6EFA86120F7F834B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f0ee1c7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f0ee1c7])
    SignalFlowHasStarted(flowId=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=777243602051768248), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4124208991183535777), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-777243602051768248-3999635541458592872-0-0), senderUUID=4a865a82-cdd3-4356-849c-b5652086c0e9))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4124208991183535777): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=777243602051768248)), errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f0ee1c7]
    []


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.547Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.551Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.570Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), maySkipCheckpoint=false, fiber=38987CE9898054E41BA1E78E36E6718DAAEDE93A8CCFD587C7A801DBD7F8D863, )
  Actions: 
    PersistCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4124208991183535777)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=777243602051768248)), errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), frozenFiber=38987CE9898054E41BA1E78E36E6718DAAEDE93A8CCFD587C7A801DBD7F8D863), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2D3C2AAD996C3A84C493D272E2153EF76DA8A5E69D7DD8BB6EFA86120F7F834B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), frozenFiber=38987CE9898054E41BA1E78E36E6718DAAEDE93A8CCFD587C7A801DBD7F8D863)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.574Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4124208991183535777).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.593Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.632Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=280486A2A7AFA7818B32E3CA4866E7E52DAF454CB6447EE1F373955E12D67440, )
  Actions: 
    PersistCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4124208991183535777)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=777243602051768248)), errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=280486A2A7AFA7818B32E3CA4866E7E52DAF454CB6447EE1F373955E12D67440), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    38987CE9898054E41BA1E78E36E6718DAAEDE93A8CCFD587C7A801DBD7F8D863
    280486A2A7AFA7818B32E3CA4866E7E52DAF454CB6447EE1F373955E12D67440
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.647Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=777243602051768248), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-777243602051768248-3999635541458592872-2-0), senderUUID=4a865a82-cdd3-4356-849c-b5652086c0e9))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.650Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.663Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.669Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), maySkipCheckpoint=false, fiber=6DCD2F0603042EF02D5CDF81BB5B21A66DCE6006C15EC4A3B55B6870FB80527E, )
  Actions: 
    PersistCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4124208991183535777)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=777243602051768248)), errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), frozenFiber=6DCD2F0603042EF02D5CDF81BB5B21A66DCE6006C15EC4A3B55B6870FB80527E), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))])
checkpoint.flowState.frozenFiber.hash: 
    280486A2A7AFA7818B32E3CA4866E7E52DAF454CB6447EE1F373955E12D67440
    6DCD2F0603042EF02D5CDF81BB5B21A66DCE6006C15EC4A3B55B6870FB80527E
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.671Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.739Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4124208991183535777), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5acac5bd, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4124208991183535777).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=777243602051768248))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5acac5bd]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.740Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.741Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.760Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=911662911335084492, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.764Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.766Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[WARN ] 2019-07-06T10:32:48,802Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:32:48,805Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[WARN ] 2019-07-06T10:32:48,862Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] errored, dumping all transitions:

 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.542Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2D3C2AAD996C3A84C493D272E2153EF76DA8A5E69D7DD8BB6EFA86120F7F834B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f0ee1c7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f0ee1c7])
    SignalFlowHasStarted(flowId=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=777243602051768248), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4124208991183535777), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-777243602051768248-3999635541458592872-0-0), senderUUID=4a865a82-cdd3-4356-849c-b5652086c0e9))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4124208991183535777): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=777243602051768248)), errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f0ee1c7]
    []


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.547Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.551Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.570Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), maySkipCheckpoint=false, fiber=38987CE9898054E41BA1E78E36E6718DAAEDE93A8CCFD587C7A801DBD7F8D863, )
  Actions: 
    PersistCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4124208991183535777)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=777243602051768248)), errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), frozenFiber=38987CE9898054E41BA1E78E36E6718DAAEDE93A8CCFD587C7A801DBD7F8D863), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2D3C2AAD996C3A84C493D272E2153EF76DA8A5E69D7DD8BB6EFA86120F7F834B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), frozenFiber=38987CE9898054E41BA1E78E36E6718DAAEDE93A8CCFD587C7A801DBD7F8D863)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.574Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4124208991183535777).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.593Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.632Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=280486A2A7AFA7818B32E3CA4866E7E52DAF454CB6447EE1F373955E12D67440, )
  Actions: 
    PersistCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4124208991183535777)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=777243602051768248)), errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=280486A2A7AFA7818B32E3CA4866E7E52DAF454CB6447EE1F373955E12D67440), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    38987CE9898054E41BA1E78E36E6718DAAEDE93A8CCFD587C7A801DBD7F8D863
    280486A2A7AFA7818B32E3CA4866E7E52DAF454CB6447EE1F373955E12D67440
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.647Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=777243602051768248), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-777243602051768248-3999635541458592872-2-0), senderUUID=4a865a82-cdd3-4356-849c-b5652086c0e9))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.650Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.663Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.669Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), maySkipCheckpoint=false, fiber=6DCD2F0603042EF02D5CDF81BB5B21A66DCE6006C15EC4A3B55B6870FB80527E, )
  Actions: 
    PersistCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4124208991183535777)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=777243602051768248)), errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), frozenFiber=6DCD2F0603042EF02D5CDF81BB5B21A66DCE6006C15EC4A3B55B6870FB80527E), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))])
checkpoint.flowState.frozenFiber.hash: 
    280486A2A7AFA7818B32E3CA4866E7E52DAF454CB6447EE1F373955E12D67440
    6DCD2F0603042EF02D5CDF81BB5B21A66DCE6006C15EC4A3B55B6870FB80527E
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.671Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.739Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4124208991183535777), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5acac5bd, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4124208991183535777).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=777243602051768248))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5acac5bd]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.740Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.741Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.760Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=911662911335084492, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.764Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.766Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] ---
  Timestamp: 2019-07-06T10:32:48.843Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=911662911335084492)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)], senderUUID=4a865a82-cdd3-4356-849c-b5652086c0e9)
    CreateTransaction
    RemoveCheckpoint(id=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5acac5bd])
    ReleaseSoftLocks(uuid=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5acac5bd])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4124208991183535777)])
    RemoveFlow(flowId=[00e66bbe-ebf4-4aae-9321-40a2a7c53a0f], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=911662911335084492, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Invocation, sessionId=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, timestamp: 2019-07-06T10:32:48.480Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4124208991183535777)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-777243602051768248-3999635541458592872)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4124208991183535777))]), frozenFiber=6DCD2F0603042EF02D5CDF81BB5B21A66DCE6006C15EC4A3B55B6870FB80527E), errorState=Errored(errors=[FlowError(errorId=911662911335084492, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@681ce8a, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=4a865a82-cdd3-4356-849c-b5652086c0e9))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5acac5bd]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
[WARN ] 2019-07-06T10:32:48,862Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [00e66bbe-ebf4-4aae-9321-40a2a7c53a0f] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=00e66bbe-ebf4-4aae-9321-40a2a7c53a0f, invocation_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, invocation_timestamp=2019-07-06T10:32:48.480Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b9f0fb3a-c535-45f5-b108-7dde3bbe7699, session_timestamp=2019-07-06T10:32:48.480Z, thread-id=102, tx_id=9BA916D96766EA39405BD720C625ED276CB5CA049D52FB77F2B3DFB28DE4BC15}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4124208991183535777) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:49,031Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103248.911/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:32:49,032Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103248.911/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:49,032Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103248.911/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:49,058Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:49,070Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:49,073Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:49,074Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:49,080Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:48.911Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:49,656Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:49,660Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103248.911/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:49,660Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:49,663Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:49,671Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:49,672Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:49,788Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:49,799Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:49,831Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:49,839Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:49,840Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:49,983Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:49,988Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:49,989Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409169988) {}
[INFO ] 2019-07-06T10:32:49,991Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:50,012Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409169988) {}
[INFO ] 2019-07-06T10:32:50,026Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:50,040Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409169988) {}
[INFO ] 2019-07-06T10:32:50,052Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:50,092Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:50,094Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:32:50,094Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:32:50,107Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409169988) {}
[INFO ] 2019-07-06T10:32:50,110Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409169988) {}
[INFO ] 2019-07-06T10:32:50,110Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:50,110Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409169988) {}
[INFO ] 2019-07-06T10:32:50,110Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:50,113Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103248.911/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:32:50,113Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103248.911/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:50,113Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103248.911/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:50,137Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:50,147Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:50,175Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:50,176Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:50,180Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:48.911Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:50,657Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:50,661Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103248.911/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:50,661Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:50,663Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:50,665Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:50,665Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:50,764Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:50,775Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:50,777Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:50,778Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:32:50,798Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:50,798Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:50,952Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:50,956Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:50,957Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409170956) {}
[INFO ] 2019-07-06T10:32:50,959Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:50,967Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409170956) {}
[INFO ] 2019-07-06T10:32:50,977Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:50,989Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409170956) {}
[INFO ] 2019-07-06T10:32:50,995Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:51,013Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:51,022Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409170956) {}
[INFO ] 2019-07-06T10:32:51,033Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409169988) {}
[INFO ] 2019-07-06T10:32:51,037Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:51,049Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409170956) {}
[INFO ] 2019-07-06T10:32:51,050Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:51,058Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409170956) {}
[INFO ] 2019-07-06T10:32:51,058Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:51,058Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409170956) {}
[INFO ] 2019-07-06T10:32:51,058Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:51,063Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103248.911/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:32:51,063Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103248.911/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:51,064Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103248.911/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:51,089Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:51,099Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:51,130Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:51,130Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:51,134Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:48.911Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:51,617Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:51,622Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103248.911/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:51,622Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:51,623Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:51,626Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:51,626Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:51,729Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:51,739Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:51,741Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:51,743Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:32:51,760Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:51,761Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:51,903Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:51,911Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:51,912Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409171912) {}
[INFO ] 2019-07-06T10:32:51,915Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:51,924Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409171912) {}
[INFO ] 2019-07-06T10:32:51,931Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:51,940Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409171912) {}
[INFO ] 2019-07-06T10:32:51,959Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:51,988Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:51,998Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409171912) {}
[INFO ] 2019-07-06T10:32:52,009Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409169988) {}
[INFO ] 2019-07-06T10:32:52,011Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:52,024Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409171912) {}
[INFO ] 2019-07-06T10:32:52,026Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:52,038Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409170956) {}
[INFO ] 2019-07-06T10:32:52,042Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:52,054Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409171912) {}
[INFO ] 2019-07-06T10:32:52,056Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:52,067Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409171912) {}
[INFO ] 2019-07-06T10:32:52,067Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:52,067Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409171912) {}
[INFO ] 2019-07-06T10:32:52,067Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:53,741Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=fe0a182b-e998-4d06-a8e3-5e749fbbac4d, invocation_id=847445be-1c27-467c-a542-67bab8f26e59, invocation_timestamp=2019-07-06T10:32:52.070Z, origin=Only For Testing, session_id=847445be-1c27-467c-a542-67bab8f26e59, session_timestamp=2019-07-06T10:32:52.070Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[INFO ] 2019-07-06T10:32:53,742Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=fe0a182b-e998-4d06-a8e3-5e749fbbac4d, invocation_id=847445be-1c27-467c-a542-67bab8f26e59, invocation_timestamp=2019-07-06T10:32:52.070Z, origin=Only For Testing, session_id=847445be-1c27-467c-a542-67bab8f26e59, session_timestamp=2019-07-06T10:32:52.070Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[INFO ] 2019-07-06T10:32:53,764Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=fe0a182b-e998-4d06-a8e3-5e749fbbac4d, invocation_id=847445be-1c27-467c-a542-67bab8f26e59, invocation_timestamp=2019-07-06T10:32:52.070Z, origin=Only For Testing, session_id=847445be-1c27-467c-a542-67bab8f26e59, session_timestamp=2019-07-06T10:32:52.070Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[INFO ] 2019-07-06T10:32:53,815Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[WARN ] 2019-07-06T10:32:53,817Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[INFO ] 2019-07-06T10:32:53,829Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[INFO ] 2019-07-06T10:32:53,847Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=fe0a182b-e998-4d06-a8e3-5e749fbbac4d, invocation_id=847445be-1c27-467c-a542-67bab8f26e59, invocation_timestamp=2019-07-06T10:32:52.070Z, origin=Only For Testing, session_id=847445be-1c27-467c-a542-67bab8f26e59, session_timestamp=2019-07-06T10:32:52.070Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[INFO ] 2019-07-06T10:32:53,847Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=fe0a182b-e998-4d06-a8e3-5e749fbbac4d, invocation_id=847445be-1c27-467c-a542-67bab8f26e59, invocation_timestamp=2019-07-06T10:32:52.070Z, origin=Only For Testing, session_id=847445be-1c27-467c-a542-67bab8f26e59, session_timestamp=2019-07-06T10:32:52.070Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[INFO ] 2019-07-06T10:32:53,855Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:53,856Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e195a80b-d2bc-44e8-9dab-0dafee356058] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8505771248934568567)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), frozenFiber=3FEEE50F11F4FD9DA9668565F911A309BF4A6A92A419EACCB4638F0F6199BB1E), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@64cdfcc1, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@455c1541], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a1322a29-39cc-4d6b-9647-ad0e6fe88f20) {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[INFO ] 2019-07-06T10:32:53,856Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [e195a80b-d2bc-44e8-9dab-0dafee356058] has error [0] {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:53,856Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e195a80b-d2bc-44e8-9dab-0dafee356058] error allowed to propagate {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[WARN ] 2019-07-06T10:32:53,862Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e195a80b-d2bc-44e8-9dab-0dafee356058] errored, dumping all transitions:

 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.806Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B83326C0076B19E731D184DA2A0B0243C47E7E09C66CECBCA05AFE0FC410B709), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2c100c87])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2c100c87])
    SignalFlowHasStarted(flowId=[e195a80b-d2bc-44e8-9dab-0dafee356058])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8854654960243816413), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=8505771248934568567), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8854654960243816413-3016725125585576506-0-0), senderUUID=a1322a29-39cc-4d6b-9647-ad0e6fe88f20))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=8505771248934568567): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8854654960243816413)), errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2c100c87]
    []


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.806Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.806Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.810Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), maySkipCheckpoint=false, fiber=89440D4EA3FCF779490F8D64327706626ADC9937FA537A5CA4E423F28F7E8C01, )
  Actions: 
    PersistCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8505771248934568567)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8854654960243816413)), errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), frozenFiber=89440D4EA3FCF779490F8D64327706626ADC9937FA537A5CA4E423F28F7E8C01), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B83326C0076B19E731D184DA2A0B0243C47E7E09C66CECBCA05AFE0FC410B709)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), frozenFiber=89440D4EA3FCF779490F8D64327706626ADC9937FA537A5CA4E423F28F7E8C01)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.812Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=8505771248934568567).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.818Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.825Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=9D4B08D6B5458D87140E47E215F56AF9F93D8FE2F43EBBCA5D8C0422815C73DF, )
  Actions: 
    PersistCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8505771248934568567)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8854654960243816413)), errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=9D4B08D6B5458D87140E47E215F56AF9F93D8FE2F43EBBCA5D8C0422815C73DF), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    89440D4EA3FCF779490F8D64327706626ADC9937FA537A5CA4E423F28F7E8C01
    9D4B08D6B5458D87140E47E215F56AF9F93D8FE2F43EBBCA5D8C0422815C73DF
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.829Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8854654960243816413), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8854654960243816413-3016725125585576506-2-0), senderUUID=a1322a29-39cc-4d6b-9647-ad0e6fe88f20))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.829Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.834Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.838Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), maySkipCheckpoint=false, fiber=3FEEE50F11F4FD9DA9668565F911A309BF4A6A92A419EACCB4638F0F6199BB1E, )
  Actions: 
    PersistCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8505771248934568567)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8854654960243816413)), errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), frozenFiber=3FEEE50F11F4FD9DA9668565F911A309BF4A6A92A419EACCB4638F0F6199BB1E), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))])
checkpoint.flowState.frozenFiber.hash: 
    9D4B08D6B5458D87140E47E215F56AF9F93D8FE2F43EBBCA5D8C0422815C73DF
    3FEEE50F11F4FD9DA9668565F911A309BF4A6A92A419EACCB4638F0F6199BB1E
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.841Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.854Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8505771248934568567), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@455c1541, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8505771248934568567).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8854654960243816413))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@455c1541]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.855Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.855Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.856Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8351571501538674934, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.856Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.857Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[WARN ] 2019-07-06T10:32:53,862Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e195a80b-d2bc-44e8-9dab-0dafee356058] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:32:53,863Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[WARN ] 2019-07-06T10:32:53,878Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e195a80b-d2bc-44e8-9dab-0dafee356058] errored, dumping all transitions:

 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.806Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B83326C0076B19E731D184DA2A0B0243C47E7E09C66CECBCA05AFE0FC410B709), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2c100c87])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2c100c87])
    SignalFlowHasStarted(flowId=[e195a80b-d2bc-44e8-9dab-0dafee356058])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8854654960243816413), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=8505771248934568567), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8854654960243816413-3016725125585576506-0-0), senderUUID=a1322a29-39cc-4d6b-9647-ad0e6fe88f20))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=8505771248934568567): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8854654960243816413)), errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2c100c87]
    []


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.806Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.806Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.810Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), maySkipCheckpoint=false, fiber=89440D4EA3FCF779490F8D64327706626ADC9937FA537A5CA4E423F28F7E8C01, )
  Actions: 
    PersistCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8505771248934568567)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8854654960243816413)), errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), frozenFiber=89440D4EA3FCF779490F8D64327706626ADC9937FA537A5CA4E423F28F7E8C01), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B83326C0076B19E731D184DA2A0B0243C47E7E09C66CECBCA05AFE0FC410B709)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), frozenFiber=89440D4EA3FCF779490F8D64327706626ADC9937FA537A5CA4E423F28F7E8C01)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.812Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=8505771248934568567).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.818Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.825Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=9D4B08D6B5458D87140E47E215F56AF9F93D8FE2F43EBBCA5D8C0422815C73DF, )
  Actions: 
    PersistCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8505771248934568567)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8854654960243816413)), errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=9D4B08D6B5458D87140E47E215F56AF9F93D8FE2F43EBBCA5D8C0422815C73DF), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    89440D4EA3FCF779490F8D64327706626ADC9937FA537A5CA4E423F28F7E8C01
    9D4B08D6B5458D87140E47E215F56AF9F93D8FE2F43EBBCA5D8C0422815C73DF
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.829Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8854654960243816413), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8854654960243816413-3016725125585576506-2-0), senderUUID=a1322a29-39cc-4d6b-9647-ad0e6fe88f20))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.829Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.834Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.838Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), maySkipCheckpoint=false, fiber=3FEEE50F11F4FD9DA9668565F911A309BF4A6A92A419EACCB4638F0F6199BB1E, )
  Actions: 
    PersistCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8505771248934568567)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8854654960243816413)), errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), frozenFiber=3FEEE50F11F4FD9DA9668565F911A309BF4A6A92A419EACCB4638F0F6199BB1E), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))])
checkpoint.flowState.frozenFiber.hash: 
    9D4B08D6B5458D87140E47E215F56AF9F93D8FE2F43EBBCA5D8C0422815C73DF
    3FEEE50F11F4FD9DA9668565F911A309BF4A6A92A419EACCB4638F0F6199BB1E
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.841Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.854Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8505771248934568567), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@455c1541, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8505771248934568567).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8854654960243816413))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@455c1541]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.855Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.855Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.856Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8351571501538674934, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.856Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.857Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [e195a80b-d2bc-44e8-9dab-0dafee356058] ---
  Timestamp: 2019-07-06T10:32:53.874Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-8351571501538674934)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)], senderUUID=a1322a29-39cc-4d6b-9647-ad0e6fe88f20)
    CreateTransaction
    RemoveCheckpoint(id=[e195a80b-d2bc-44e8-9dab-0dafee356058])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@455c1541])
    ReleaseSoftLocks(uuid=e195a80b-d2bc-44e8-9dab-0dafee356058)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@455c1541])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=8505771248934568567)])
    RemoveFlow(flowId=[e195a80b-d2bc-44e8-9dab-0dafee356058], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-8351571501538674934, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Invocation, sessionId=895f8740-46c1-4cca-8c7e-ded5ddf6f116, timestamp: 2019-07-06T10:32:53.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8505771248934568567)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8854654960243816413-3016725125585576506)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8505771248934568567))]), frozenFiber=3FEEE50F11F4FD9DA9668565F911A309BF4A6A92A419EACCB4638F0F6199BB1E), errorState=Errored(errors=[FlowError(errorId=-8351571501538674934, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@64cdfcc1, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a1322a29-39cc-4d6b-9647-ad0e6fe88f20))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@455c1541]
    []
isRemoved: 
    false
    true
 {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
[WARN ] 2019-07-06T10:32:53,879Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e195a80b-d2bc-44e8-9dab-0dafee356058] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=e195a80b-d2bc-44e8-9dab-0dafee356058, invocation_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, invocation_timestamp=2019-07-06T10:32:53.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=895f8740-46c1-4cca-8c7e-ded5ddf6f116, session_timestamp=2019-07-06T10:32:53.793Z, thread-id=194, tx_id=2E15C1FA9C1E89B95A5B257EF213CB9541929253921962EF4863079DE8887AA4}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8505771248934568567) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:53,967Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103253.907/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:32:53,968Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103253.907/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:53,969Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103253.907/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:54,035Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:54,059Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:54,062Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:54,063Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:54,072Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:53.907Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:54,488Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:54,490Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103253.907/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:54,490Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:54,491Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:54,493Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:54,493Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:54,620Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:54,630Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:54,657Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:54,666Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:54,666Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:54,797Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:54,803Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:54,803Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409174803) {}
[INFO ] 2019-07-06T10:32:54,805Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:54,825Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409174803) {}
[INFO ] 2019-07-06T10:32:54,837Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:54,853Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409174803) {}
[INFO ] 2019-07-06T10:32:54,866Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:54,882Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:54,885Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:32:54,886Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:32:54,900Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409174803) {}
[INFO ] 2019-07-06T10:32:54,905Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409174803) {}
[INFO ] 2019-07-06T10:32:54,905Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:54,905Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409174803) {}
[INFO ] 2019-07-06T10:32:54,905Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:54,910Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103253.907/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:32:54,912Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103253.907/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:54,912Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103253.907/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:54,945Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:54,957Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:54,984Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:54,985Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:54,989Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:53.907Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:55,547Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:55,549Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103253.907/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:55,549Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:55,550Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:55,552Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:55,552Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:55,657Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:55,665Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:55,668Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:55,668Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:32:55,687Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:55,690Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:55,813Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:55,818Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:55,818Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409175818) {}
[INFO ] 2019-07-06T10:32:55,821Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:55,830Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409175818) {}
[INFO ] 2019-07-06T10:32:55,837Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:55,849Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409175818) {}
[INFO ] 2019-07-06T10:32:55,856Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:55,897Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:55,904Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409175818) {}
[INFO ] 2019-07-06T10:32:55,909Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409174803) {}
[INFO ] 2019-07-06T10:32:55,911Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:55,926Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409175818) {}
[INFO ] 2019-07-06T10:32:55,927Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:55,938Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409175818) {}
[INFO ] 2019-07-06T10:32:55,938Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:55,938Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409175818) {}
[INFO ] 2019-07-06T10:32:55,938Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:55,940Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103253.907/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:32:55,941Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103253.907/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:55,941Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103253.907/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:55,964Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:55,971Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:55,994Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:55,994Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:55,998Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:53.907Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:56,399Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:56,402Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103253.907/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:56,402Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:56,403Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:56,406Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:56,407Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:56,498Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:56,505Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:56,508Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:56,508Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:32:56,522Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:56,522Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:56,612Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:56,617Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:56,617Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409176617) {}
[INFO ] 2019-07-06T10:32:56,619Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:56,626Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409176617) {}
[INFO ] 2019-07-06T10:32:56,634Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:56,647Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409176617) {}
[INFO ] 2019-07-06T10:32:56,651Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:56,695Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:56,702Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409176617) {}
[INFO ] 2019-07-06T10:32:56,705Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409174803) {}
[INFO ] 2019-07-06T10:32:56,707Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:56,718Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409176617) {}
[INFO ] 2019-07-06T10:32:56,720Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:56,729Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409175818) {}
[INFO ] 2019-07-06T10:32:56,731Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:56,741Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409176617) {}
[INFO ] 2019-07-06T10:32:56,743Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:56,753Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409176617) {}
[INFO ] 2019-07-06T10:32:56,753Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:56,753Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409176617) {}
[INFO ] 2019-07-06T10:32:56,753Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:58,027Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6ea893d2-75f5-479b-95ec-400191894f04, invocation_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, invocation_timestamp=2019-07-06T10:32:56.756Z, origin=Only For Testing, session_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, session_timestamp=2019-07-06T10:32:56.756Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[INFO ] 2019-07-06T10:32:58,028Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6ea893d2-75f5-479b-95ec-400191894f04, invocation_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, invocation_timestamp=2019-07-06T10:32:56.756Z, origin=Only For Testing, session_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, session_timestamp=2019-07-06T10:32:56.756Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[INFO ] 2019-07-06T10:32:58,048Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6ea893d2-75f5-479b-95ec-400191894f04, invocation_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, invocation_timestamp=2019-07-06T10:32:56.756Z, origin=Only For Testing, session_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, session_timestamp=2019-07-06T10:32:56.756Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[INFO ] 2019-07-06T10:32:58,096Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[WARN ] 2019-07-06T10:32:58,097Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[INFO ] 2019-07-06T10:32:58,116Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[INFO ] 2019-07-06T10:32:58,132Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6ea893d2-75f5-479b-95ec-400191894f04, invocation_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, invocation_timestamp=2019-07-06T10:32:56.756Z, origin=Only For Testing, session_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, session_timestamp=2019-07-06T10:32:56.756Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[INFO ] 2019-07-06T10:32:58,133Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6ea893d2-75f5-479b-95ec-400191894f04, invocation_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, invocation_timestamp=2019-07-06T10:32:56.756Z, origin=Only For Testing, session_id=f5e8a353-cab2-4dc9-b920-255fc2d028c7, session_timestamp=2019-07-06T10:32:56.756Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[INFO ] 2019-07-06T10:32:58,140Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:58,140Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6887932840362010465)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), frozenFiber=7021B8F14654D43B17C0686F00B491130EA6ABDBC5DAF07309187F76A0A9A33E), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@5feabd14, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fc88c63], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=7369e4c3-ee24-4762-a0ae-3cdfc64881e4) {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[INFO ] 2019-07-06T10:32:58,141Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] has error [0] {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:58,141Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] error allowed to propagate {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[WARN ] 2019-07-06T10:32:58,145Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] errored, dumping all transitions:

 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.087Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=900365039002B43B54262847AA2927E071AE6DD5585D0534D7C480A1CA862563), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4d5748e0])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4d5748e0])
    SignalFlowHasStarted(flowId=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4504782302520814651), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6887932840362010465), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4504782302520814651--2915436281148437229-0-0), senderUUID=7369e4c3-ee24-4762-a0ae-3cdfc64881e4))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6887932840362010465): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651)), errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4d5748e0]
    []


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.088Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.088Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.092Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), maySkipCheckpoint=false, fiber=E480689E867F052FD5E9FD79825FBFFC901699D0241A8C6E9C9AACC3B0773C37, )
  Actions: 
    PersistCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6887932840362010465)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651)), errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), frozenFiber=E480689E867F052FD5E9FD79825FBFFC901699D0241A8C6E9C9AACC3B0773C37), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=900365039002B43B54262847AA2927E071AE6DD5585D0534D7C480A1CA862563)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), frozenFiber=E480689E867F052FD5E9FD79825FBFFC901699D0241A8C6E9C9AACC3B0773C37)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.093Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6887932840362010465).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.099Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.110Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=657C28F9CAA0AE54C4FD7DAE17768EC4D00D8DE65CF3531C93E175710B9A9405, )
  Actions: 
    PersistCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6887932840362010465)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651)), errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=657C28F9CAA0AE54C4FD7DAE17768EC4D00D8DE65CF3531C93E175710B9A9405), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    E480689E867F052FD5E9FD79825FBFFC901699D0241A8C6E9C9AACC3B0773C37
    657C28F9CAA0AE54C4FD7DAE17768EC4D00D8DE65CF3531C93E175710B9A9405
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.115Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4504782302520814651), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4504782302520814651--2915436281148437229-2-0), senderUUID=7369e4c3-ee24-4762-a0ae-3cdfc64881e4))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.116Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.121Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.125Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), maySkipCheckpoint=false, fiber=7021B8F14654D43B17C0686F00B491130EA6ABDBC5DAF07309187F76A0A9A33E, )
  Actions: 
    PersistCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6887932840362010465)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651)), errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), frozenFiber=7021B8F14654D43B17C0686F00B491130EA6ABDBC5DAF07309187F76A0A9A33E), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))])
checkpoint.flowState.frozenFiber.hash: 
    657C28F9CAA0AE54C4FD7DAE17768EC4D00D8DE65CF3531C93E175710B9A9405
    7021B8F14654D43B17C0686F00B491130EA6ABDBC5DAF07309187F76A0A9A33E
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.125Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.139Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6887932840362010465), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fc88c63, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6887932840362010465).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fc88c63]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.139Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.140Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.141Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2431261291436295518, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.141Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.141Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[WARN ] 2019-07-06T10:32:58,145Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:32:58,145Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[WARN ] 2019-07-06T10:32:58,157Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] errored, dumping all transitions:

 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.087Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=900365039002B43B54262847AA2927E071AE6DD5585D0534D7C480A1CA862563), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4d5748e0])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4d5748e0])
    SignalFlowHasStarted(flowId=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4504782302520814651), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6887932840362010465), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4504782302520814651--2915436281148437229-0-0), senderUUID=7369e4c3-ee24-4762-a0ae-3cdfc64881e4))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6887932840362010465): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651)), errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4d5748e0]
    []


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.088Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.088Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.092Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), maySkipCheckpoint=false, fiber=E480689E867F052FD5E9FD79825FBFFC901699D0241A8C6E9C9AACC3B0773C37, )
  Actions: 
    PersistCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6887932840362010465)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651)), errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), frozenFiber=E480689E867F052FD5E9FD79825FBFFC901699D0241A8C6E9C9AACC3B0773C37), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=900365039002B43B54262847AA2927E071AE6DD5585D0534D7C480A1CA862563)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), frozenFiber=E480689E867F052FD5E9FD79825FBFFC901699D0241A8C6E9C9AACC3B0773C37)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.093Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6887932840362010465).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.099Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.110Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=657C28F9CAA0AE54C4FD7DAE17768EC4D00D8DE65CF3531C93E175710B9A9405, )
  Actions: 
    PersistCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6887932840362010465)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651)), errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=657C28F9CAA0AE54C4FD7DAE17768EC4D00D8DE65CF3531C93E175710B9A9405), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    E480689E867F052FD5E9FD79825FBFFC901699D0241A8C6E9C9AACC3B0773C37
    657C28F9CAA0AE54C4FD7DAE17768EC4D00D8DE65CF3531C93E175710B9A9405
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.115Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4504782302520814651), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4504782302520814651--2915436281148437229-2-0), senderUUID=7369e4c3-ee24-4762-a0ae-3cdfc64881e4))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.116Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.121Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.125Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), maySkipCheckpoint=false, fiber=7021B8F14654D43B17C0686F00B491130EA6ABDBC5DAF07309187F76A0A9A33E, )
  Actions: 
    PersistCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6887932840362010465)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651)), errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), frozenFiber=7021B8F14654D43B17C0686F00B491130EA6ABDBC5DAF07309187F76A0A9A33E), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))])
checkpoint.flowState.frozenFiber.hash: 
    657C28F9CAA0AE54C4FD7DAE17768EC4D00D8DE65CF3531C93E175710B9A9405
    7021B8F14654D43B17C0686F00B491130EA6ABDBC5DAF07309187F76A0A9A33E
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.125Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.139Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6887932840362010465), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fc88c63, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6887932840362010465).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-4504782302520814651))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fc88c63]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.139Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.140Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.141Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2431261291436295518, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.141Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.141Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] ---
  Timestamp: 2019-07-06T10:32:58.154Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2431261291436295518)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)], senderUUID=7369e4c3-ee24-4762-a0ae-3cdfc64881e4)
    CreateTransaction
    RemoveCheckpoint(id=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fc88c63])
    ReleaseSoftLocks(uuid=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fc88c63])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-6887932840362010465)])
    RemoveFlow(flowId=[4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2431261291436295518, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Invocation, sessionId=28844bb0-46e1-45e3-9d39-e74fdda06bc1, timestamp: 2019-07-06T10:32:58.076Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6887932840362010465)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--4504782302520814651--2915436281148437229)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6887932840362010465))]), frozenFiber=7021B8F14654D43B17C0686F00B491130EA6ABDBC5DAF07309187F76A0A9A33E), errorState=Errored(errors=[FlowError(errorId=2431261291436295518, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@5feabd14, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=7369e4c3-ee24-4762-a0ae-3cdfc64881e4))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fc88c63]
    []
isRemoved: 
    false
    true
 {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
[WARN ] 2019-07-06T10:32:58,157Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=4eb4b451-8ac3-4ec5-8bf4-e4ad8ea6642d, invocation_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, invocation_timestamp=2019-07-06T10:32:58.076Z, origin=O=Mock Company 1, L=London, C=GB, session_id=28844bb0-46e1-45e3-9d39-e74fdda06bc1, session_timestamp=2019-07-06T10:32:58.076Z, thread-id=284, tx_id=D1D908B4EAA2627AD1F8FFD7DD1A7A8E778191F534E2D9DBD51C67D2789A8EEB}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6887932840362010465) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:32:58,246Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103258.182/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:32:58,246Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103258.182/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:58,247Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103258.182/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:58,289Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:58,295Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:58,298Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:58,298Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:58,303Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:58.182Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:58,707Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:58,709Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103258.182/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:58,709Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:58,710Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:58,712Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:58,712Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:58,810Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:58,819Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:58,863Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:58,870Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:58,870Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:59,007Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:32:59,013Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:59,014Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409179014) {}
[INFO ] 2019-07-06T10:32:59,017Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:59,032Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409179014) {}
[INFO ] 2019-07-06T10:32:59,043Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:59,053Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409179014) {}
[INFO ] 2019-07-06T10:32:59,059Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:59,077Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:59,079Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:32:59,079Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:32:59,089Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409179014) {}
[INFO ] 2019-07-06T10:32:59,091Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409179014) {}
[INFO ] 2019-07-06T10:32:59,091Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:59,091Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409179014) {}
[INFO ] 2019-07-06T10:32:59,091Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:59,093Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103258.182/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:32:59,094Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103258.182/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:59,094Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103258.182/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:59,102Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:59,108Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:32:59,147Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:59,147Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:32:59,150Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:58.182Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:32:59,552Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:32:59,555Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103258.182/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:32:59,555Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:32:59,557Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:32:59,559Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:59,559Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:59,630Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:32:59,639Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:32:59,641Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:32:59,642Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:32:59,671Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:59,671Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:59,787Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:32:59,801Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:32:59,802Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409179802) {}
[INFO ] 2019-07-06T10:32:59,805Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:59,814Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409179802) {}
[INFO ] 2019-07-06T10:32:59,821Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:32:59,831Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409179802) {}
[INFO ] 2019-07-06T10:32:59,842Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:59,891Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:32:59,906Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409179802) {}
[INFO ] 2019-07-06T10:32:59,910Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409179014) {}
[INFO ] 2019-07-06T10:32:59,916Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:59,924Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409179802) {}
[INFO ] 2019-07-06T10:32:59,926Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:32:59,934Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409179802) {}
[INFO ] 2019-07-06T10:32:59,935Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:59,935Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409179802) {}
[INFO ] 2019-07-06T10:32:59,936Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:32:59,939Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103258.182/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:32:59,939Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103258.182/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:32:59,939Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103258.182/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:32:59,955Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:32:59,959Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:33:00,025Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:00,026Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:00,030Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:32:58.182Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:33:00,355Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:33:00,357Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103258.182/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:33:00,357Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:33:00,358Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:33:00,360Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:00,360Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:00,460Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:00,469Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:33:00,471Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:33:00,472Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:33:00,498Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:00,498Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:00,606Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:00,612Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:33:00,612Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409180612) {}
[INFO ] 2019-07-06T10:33:00,614Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:00,621Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409180612) {}
[INFO ] 2019-07-06T10:33:00,627Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:33:00,641Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409180612) {}
[INFO ] 2019-07-06T10:33:00,651Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:00,668Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:33:00,680Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409180612) {}
[INFO ] 2019-07-06T10:33:00,683Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409179014) {}
[INFO ] 2019-07-06T10:33:00,685Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:00,697Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409180612) {}
[INFO ] 2019-07-06T10:33:00,699Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:00,710Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409179802) {}
[INFO ] 2019-07-06T10:33:00,713Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:00,722Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409180612) {}
[INFO ] 2019-07-06T10:33:00,724Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:00,734Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409180612) {}
[INFO ] 2019-07-06T10:33:00,734Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:00,734Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409180612) {}
[INFO ] 2019-07-06T10:33:00,734Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:02,137Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=4dd04517-08aa-4e41-987c-1b27d0a743d4, invocation_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, invocation_timestamp=2019-07-06T10:33:00.740Z, origin=Only For Testing, session_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, session_timestamp=2019-07-06T10:33:00.740Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[INFO ] 2019-07-06T10:33:02,137Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=4dd04517-08aa-4e41-987c-1b27d0a743d4, invocation_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, invocation_timestamp=2019-07-06T10:33:00.740Z, origin=Only For Testing, session_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, session_timestamp=2019-07-06T10:33:00.740Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[INFO ] 2019-07-06T10:33:02,152Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=4dd04517-08aa-4e41-987c-1b27d0a743d4, invocation_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, invocation_timestamp=2019-07-06T10:33:00.740Z, origin=Only For Testing, session_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, session_timestamp=2019-07-06T10:33:00.740Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[INFO ] 2019-07-06T10:33:02,196Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[WARN ] 2019-07-06T10:33:02,196Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[INFO ] 2019-07-06T10:33:02,206Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[INFO ] 2019-07-06T10:33:02,224Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=4dd04517-08aa-4e41-987c-1b27d0a743d4, invocation_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, invocation_timestamp=2019-07-06T10:33:00.740Z, origin=Only For Testing, session_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, session_timestamp=2019-07-06T10:33:00.740Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[INFO ] 2019-07-06T10:33:02,224Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=4dd04517-08aa-4e41-987c-1b27d0a743d4, invocation_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, invocation_timestamp=2019-07-06T10:33:00.740Z, origin=Only For Testing, session_id=4bfa450f-3113-4b52-b7f9-17283e00c3d3, session_timestamp=2019-07-06T10:33:00.740Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[INFO ] 2019-07-06T10:33:02,231Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:33:02,232Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7715039827953654858)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), frozenFiber=2828A008C5A585BA2760A080CD0EC94F64863901F8B991AB62365E6E34D17C1B), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1bdc3e31, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5fb5b41e], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=dfb47fe8-3bb1-41e9-ae0b-4fb28c468d8f) {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[INFO ] 2019-07-06T10:33:02,232Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] has error [0] {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:33:02,232Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] error allowed to propagate {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[WARN ] 2019-07-06T10:33:02,236Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] errored, dumping all transitions:

 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.188Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4D747DC74E78E7F7040E77718535413FE914D522F25CEB65E9A5813C3D412011), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31dfe7e1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31dfe7e1])
    SignalFlowHasStarted(flowId=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1658891197388887702), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7715039827953654858), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1658891197388887702-1813660119453912008-0-0), senderUUID=dfb47fe8-3bb1-41e9-ae0b-4fb28c468d8f))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7715039827953654858): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1658891197388887702)), errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31dfe7e1]
    []


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.188Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.188Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.192Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), maySkipCheckpoint=false, fiber=D2ABE0609701BB3C42A2C29F4D6C20C4011C4754F9785A86B2E78DFA38C8F2CC, )
  Actions: 
    PersistCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7715039827953654858)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1658891197388887702)), errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), frozenFiber=D2ABE0609701BB3C42A2C29F4D6C20C4011C4754F9785A86B2E78DFA38C8F2CC), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4D747DC74E78E7F7040E77718535413FE914D522F25CEB65E9A5813C3D412011)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), frozenFiber=D2ABE0609701BB3C42A2C29F4D6C20C4011C4754F9785A86B2E78DFA38C8F2CC)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.193Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7715039827953654858).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.197Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.203Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=CB050AF30CF7686123A03473801D3544676117DE33CCA004E21D4259213EDEC4, )
  Actions: 
    PersistCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7715039827953654858)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1658891197388887702)), errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=CB050AF30CF7686123A03473801D3544676117DE33CCA004E21D4259213EDEC4), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    D2ABE0609701BB3C42A2C29F4D6C20C4011C4754F9785A86B2E78DFA38C8F2CC
    CB050AF30CF7686123A03473801D3544676117DE33CCA004E21D4259213EDEC4
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.206Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1658891197388887702), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1658891197388887702-1813660119453912008-2-0), senderUUID=dfb47fe8-3bb1-41e9-ae0b-4fb28c468d8f))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.206Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.211Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.214Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), maySkipCheckpoint=false, fiber=2828A008C5A585BA2760A080CD0EC94F64863901F8B991AB62365E6E34D17C1B, )
  Actions: 
    PersistCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7715039827953654858)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1658891197388887702)), errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), frozenFiber=2828A008C5A585BA2760A080CD0EC94F64863901F8B991AB62365E6E34D17C1B), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))])
checkpoint.flowState.frozenFiber.hash: 
    CB050AF30CF7686123A03473801D3544676117DE33CCA004E21D4259213EDEC4
    2828A008C5A585BA2760A080CD0EC94F64863901F8B991AB62365E6E34D17C1B
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.215Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.231Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7715039827953654858), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5fb5b41e, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7715039827953654858).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=1658891197388887702))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5fb5b41e]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.231Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.231Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.232Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-662916427151437035, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.233Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.233Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[WARN ] 2019-07-06T10:33:02,236Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:33:02,237Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[WARN ] 2019-07-06T10:33:02,250Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] errored, dumping all transitions:

 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.188Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4D747DC74E78E7F7040E77718535413FE914D522F25CEB65E9A5813C3D412011), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31dfe7e1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31dfe7e1])
    SignalFlowHasStarted(flowId=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1658891197388887702), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7715039827953654858), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1658891197388887702-1813660119453912008-0-0), senderUUID=dfb47fe8-3bb1-41e9-ae0b-4fb28c468d8f))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7715039827953654858): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1658891197388887702)), errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31dfe7e1]
    []


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.188Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.188Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.192Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), maySkipCheckpoint=false, fiber=D2ABE0609701BB3C42A2C29F4D6C20C4011C4754F9785A86B2E78DFA38C8F2CC, )
  Actions: 
    PersistCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7715039827953654858)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1658891197388887702)), errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), frozenFiber=D2ABE0609701BB3C42A2C29F4D6C20C4011C4754F9785A86B2E78DFA38C8F2CC), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4D747DC74E78E7F7040E77718535413FE914D522F25CEB65E9A5813C3D412011)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), frozenFiber=D2ABE0609701BB3C42A2C29F4D6C20C4011C4754F9785A86B2E78DFA38C8F2CC)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.193Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7715039827953654858).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.197Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.203Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=CB050AF30CF7686123A03473801D3544676117DE33CCA004E21D4259213EDEC4, )
  Actions: 
    PersistCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7715039827953654858)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1658891197388887702)), errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=CB050AF30CF7686123A03473801D3544676117DE33CCA004E21D4259213EDEC4), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    D2ABE0609701BB3C42A2C29F4D6C20C4011C4754F9785A86B2E78DFA38C8F2CC
    CB050AF30CF7686123A03473801D3544676117DE33CCA004E21D4259213EDEC4
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.206Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1658891197388887702), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1658891197388887702-1813660119453912008-2-0), senderUUID=dfb47fe8-3bb1-41e9-ae0b-4fb28c468d8f))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.206Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.211Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.214Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), maySkipCheckpoint=false, fiber=2828A008C5A585BA2760A080CD0EC94F64863901F8B991AB62365E6E34D17C1B, )
  Actions: 
    PersistCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7715039827953654858)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1658891197388887702)), errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), frozenFiber=2828A008C5A585BA2760A080CD0EC94F64863901F8B991AB62365E6E34D17C1B), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))])
checkpoint.flowState.frozenFiber.hash: 
    CB050AF30CF7686123A03473801D3544676117DE33CCA004E21D4259213EDEC4
    2828A008C5A585BA2760A080CD0EC94F64863901F8B991AB62365E6E34D17C1B
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.215Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.231Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7715039827953654858), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5fb5b41e, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7715039827953654858).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=1658891197388887702))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5fb5b41e]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.231Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.231Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.232Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-662916427151437035, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.233Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.233Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] ---
  Timestamp: 2019-07-06T10:33:02.246Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-662916427151437035)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)], senderUUID=dfb47fe8-3bb1-41e9-ae0b-4fb28c468d8f)
    CreateTransaction
    RemoveCheckpoint(id=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5fb5b41e])
    ReleaseSoftLocks(uuid=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5fb5b41e])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=7715039827953654858)])
    RemoveFlow(flowId=[43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-662916427151437035, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Invocation, sessionId=1abd4067-37af-4d78-abd0-61cf34da33ac, timestamp: 2019-07-06T10:33:02.178Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7715039827953654858)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-1658891197388887702-1813660119453912008)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7715039827953654858))]), frozenFiber=2828A008C5A585BA2760A080CD0EC94F64863901F8B991AB62365E6E34D17C1B), errorState=Errored(errors=[FlowError(errorId=-662916427151437035, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1bdc3e31, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=dfb47fe8-3bb1-41e9-ae0b-4fb28c468d8f))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5fb5b41e]
    []
isRemoved: 
    false
    true
 {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
[WARN ] 2019-07-06T10:33:02,250Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=43a41ea5-beaa-4bd8-8172-ef7fcf7d8a10, invocation_id=1abd4067-37af-4d78-abd0-61cf34da33ac, invocation_timestamp=2019-07-06T10:33:02.178Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1abd4067-37af-4d78-abd0-61cf34da33ac, session_timestamp=2019-07-06T10:33:02.178Z, thread-id=373, tx_id=07D216FCC5BE14B17B9209867E12A0F4F2572BAC661A3B34572E83CD6925CCD5}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7715039827953654858) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:33:02,348Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103302.264/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:33:02,348Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103302.264/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:33:02,348Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103302.264/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:33:02,369Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:33:02,374Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:33:02,377Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:02,378Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:02,384Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:33:02.264Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:33:02,791Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:33:02,792Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103302.264/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:33:02,793Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:33:02,794Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:33:02,796Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:02,796Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:02,869Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:02,876Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:33:02,897Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:33:02,902Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:33:02,903Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:33:03,000Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:33:03,006Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:33:03,008Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409183007) {}
[INFO ] 2019-07-06T10:33:03,010Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:03,026Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409183007) {}
[INFO ] 2019-07-06T10:33:03,036Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:33:03,050Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409183007) {}
[INFO ] 2019-07-06T10:33:03,060Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:03,096Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:33:03,099Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:33:03,100Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:33:03,107Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409183007) {}
[INFO ] 2019-07-06T10:33:03,110Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409183007) {}
[INFO ] 2019-07-06T10:33:03,111Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:03,112Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409183007) {}
[INFO ] 2019-07-06T10:33:03,113Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:03,116Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103302.264/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:33:03,117Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103302.264/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:33:03,117Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103302.264/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:33:03,142Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:33:03,148Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:33:03,210Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:03,212Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:03,215Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:33:02.264Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:33:03,565Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:33:03,566Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103302.264/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:33:03,566Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:33:03,568Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:33:03,570Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:03,570Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:03,651Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:03,660Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:33:03,663Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:33:03,663Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:33:03,708Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:03,708Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:03,812Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:03,816Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:33:03,817Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409183816) {}
[INFO ] 2019-07-06T10:33:03,818Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:03,824Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409183816) {}
[INFO ] 2019-07-06T10:33:03,831Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:33:03,836Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409183816) {}
[INFO ] 2019-07-06T10:33:03,841Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:03,878Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:33:03,885Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409183816) {}
[INFO ] 2019-07-06T10:33:03,887Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409183007) {}
[INFO ] 2019-07-06T10:33:03,888Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:03,896Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409183816) {}
[INFO ] 2019-07-06T10:33:03,897Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:03,905Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409183816) {}
[INFO ] 2019-07-06T10:33:03,905Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:03,905Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409183816) {}
[INFO ] 2019-07-06T10:33:03,905Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:03,908Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103302.264/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:33:03,908Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103302.264/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:33:03,908Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103302.264/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:33:03,941Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:33:03,945Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:33:03,966Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:03,968Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:03,973Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:33:02.264Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:33:04,329Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:33:04,331Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103302.264/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:33:04,331Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:33:04,332Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:33:04,334Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:04,334Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:04,409Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:04,416Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:33:04,424Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:33:04,424Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:33:04,467Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:04,467Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:04,573Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:04,577Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:33:04,578Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409184577) {}
[INFO ] 2019-07-06T10:33:04,579Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:04,586Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409184577) {}
[INFO ] 2019-07-06T10:33:04,592Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:33:04,599Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409184577) {}
[INFO ] 2019-07-06T10:33:04,607Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:04,645Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:33:04,652Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409184577) {}
[INFO ] 2019-07-06T10:33:04,659Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409183007) {}
[INFO ] 2019-07-06T10:33:04,660Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:04,668Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409184577) {}
[INFO ] 2019-07-06T10:33:04,669Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:04,677Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409183816) {}
[INFO ] 2019-07-06T10:33:04,678Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:04,685Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409184577) {}
[INFO ] 2019-07-06T10:33:04,686Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:04,694Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409184577) {}
[INFO ] 2019-07-06T10:33:04,694Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:04,694Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409184577) {}
[INFO ] 2019-07-06T10:33:04,695Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:05,635Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=3f4f317c-8947-4411-a6e7-027f71f36c73, invocation_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, invocation_timestamp=2019-07-06T10:33:04.700Z, origin=Only For Testing, session_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, session_timestamp=2019-07-06T10:33:04.700Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[INFO ] 2019-07-06T10:33:05,635Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=3f4f317c-8947-4411-a6e7-027f71f36c73, invocation_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, invocation_timestamp=2019-07-06T10:33:04.700Z, origin=Only For Testing, session_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, session_timestamp=2019-07-06T10:33:04.700Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[INFO ] 2019-07-06T10:33:05,651Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=3f4f317c-8947-4411-a6e7-027f71f36c73, invocation_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, invocation_timestamp=2019-07-06T10:33:04.700Z, origin=Only For Testing, session_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, session_timestamp=2019-07-06T10:33:04.700Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[INFO ] 2019-07-06T10:33:05,689Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[WARN ] 2019-07-06T10:33:05,689Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[INFO ] 2019-07-06T10:33:05,697Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[INFO ] 2019-07-06T10:33:05,710Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=3f4f317c-8947-4411-a6e7-027f71f36c73, invocation_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, invocation_timestamp=2019-07-06T10:33:04.700Z, origin=Only For Testing, session_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, session_timestamp=2019-07-06T10:33:04.700Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[INFO ] 2019-07-06T10:33:05,710Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=3f4f317c-8947-4411-a6e7-027f71f36c73, invocation_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, invocation_timestamp=2019-07-06T10:33:04.700Z, origin=Only For Testing, session_id=fb68ffb2-4899-4722-8d05-f81fe28151ea, session_timestamp=2019-07-06T10:33:04.700Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[INFO ] 2019-07-06T10:33:05,716Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:33:05,717Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a16877b2-74aa-4210-af4d-2956c85457c1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=4362560428891798847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), frozenFiber=F1D3D8039837857299B872115CC21E340BE4CB13FD2D1DFF18A67A62B36D253C), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1c054c03, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@149056c3], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=c373d4d6-0bd5-4b4c-ad14-3d20879774fd) {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[INFO ] 2019-07-06T10:33:05,717Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [a16877b2-74aa-4210-af4d-2956c85457c1] has error [0] {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:33:05,717Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a16877b2-74aa-4210-af4d-2956c85457c1] error allowed to propagate {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[WARN ] 2019-07-06T10:33:05,720Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a16877b2-74aa-4210-af4d-2956c85457c1] errored, dumping all transitions:

 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.682Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=3F65CC9C8CA2C30DAEB60F93933A130A8FBCF0BBAE68FD28E066A2F111C7DE8B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@26fc5b98])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@26fc5b98])
    SignalFlowHasStarted(flowId=[a16877b2-74aa-4210-af4d-2956c85457c1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5130956458704734899), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=4362560428891798847), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5130956458704734899-5339992402576659659-0-0), senderUUID=c373d4d6-0bd5-4b4c-ad14-3d20879774fd))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4362560428891798847): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899)), errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@26fc5b98]
    []


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.683Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.683Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.687Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), maySkipCheckpoint=false, fiber=6E7D4822D82EE38FA345913E26C9D38EEE488782FC54D6B9645514DC8864D9E5, )
  Actions: 
    PersistCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=4362560428891798847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899)), errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), frozenFiber=6E7D4822D82EE38FA345913E26C9D38EEE488782FC54D6B9645514DC8864D9E5), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=3F65CC9C8CA2C30DAEB60F93933A130A8FBCF0BBAE68FD28E066A2F111C7DE8B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), frozenFiber=6E7D4822D82EE38FA345913E26C9D38EEE488782FC54D6B9645514DC8864D9E5)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.687Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4362560428891798847).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.690Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.695Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=63A3F45956DCD57C2F378122B290BA22206EA517FE1F3871F5281F479EE54726, )
  Actions: 
    PersistCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=4362560428891798847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899)), errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=63A3F45956DCD57C2F378122B290BA22206EA517FE1F3871F5281F479EE54726), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    6E7D4822D82EE38FA345913E26C9D38EEE488782FC54D6B9645514DC8864D9E5
    63A3F45956DCD57C2F378122B290BA22206EA517FE1F3871F5281F479EE54726
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.697Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5130956458704734899), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5130956458704734899-5339992402576659659-2-0), senderUUID=c373d4d6-0bd5-4b4c-ad14-3d20879774fd))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.697Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.701Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.704Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), maySkipCheckpoint=false, fiber=F1D3D8039837857299B872115CC21E340BE4CB13FD2D1DFF18A67A62B36D253C, )
  Actions: 
    PersistCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=4362560428891798847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899)), errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), frozenFiber=F1D3D8039837857299B872115CC21E340BE4CB13FD2D1DFF18A67A62B36D253C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))])
checkpoint.flowState.frozenFiber.hash: 
    63A3F45956DCD57C2F378122B290BA22206EA517FE1F3871F5281F479EE54726
    F1D3D8039837857299B872115CC21E340BE4CB13FD2D1DFF18A67A62B36D253C
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.704Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.716Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4362560428891798847), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@149056c3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=4362560428891798847).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@149056c3]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.716Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.716Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.717Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7967912881453239586, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.717Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.717Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[WARN ] 2019-07-06T10:33:05,720Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a16877b2-74aa-4210-af4d-2956c85457c1] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:33:05,720Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[WARN ] 2019-07-06T10:33:05,733Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a16877b2-74aa-4210-af4d-2956c85457c1] errored, dumping all transitions:

 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.682Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=3F65CC9C8CA2C30DAEB60F93933A130A8FBCF0BBAE68FD28E066A2F111C7DE8B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@26fc5b98])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@26fc5b98])
    SignalFlowHasStarted(flowId=[a16877b2-74aa-4210-af4d-2956c85457c1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5130956458704734899), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=4362560428891798847), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5130956458704734899-5339992402576659659-0-0), senderUUID=c373d4d6-0bd5-4b4c-ad14-3d20879774fd))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4362560428891798847): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899)), errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@26fc5b98]
    []


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.683Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.683Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.687Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), maySkipCheckpoint=false, fiber=6E7D4822D82EE38FA345913E26C9D38EEE488782FC54D6B9645514DC8864D9E5, )
  Actions: 
    PersistCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=4362560428891798847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899)), errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), frozenFiber=6E7D4822D82EE38FA345913E26C9D38EEE488782FC54D6B9645514DC8864D9E5), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=3F65CC9C8CA2C30DAEB60F93933A130A8FBCF0BBAE68FD28E066A2F111C7DE8B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), frozenFiber=6E7D4822D82EE38FA345913E26C9D38EEE488782FC54D6B9645514DC8864D9E5)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.687Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4362560428891798847).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.690Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.695Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=63A3F45956DCD57C2F378122B290BA22206EA517FE1F3871F5281F479EE54726, )
  Actions: 
    PersistCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=4362560428891798847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899)), errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=63A3F45956DCD57C2F378122B290BA22206EA517FE1F3871F5281F479EE54726), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    6E7D4822D82EE38FA345913E26C9D38EEE488782FC54D6B9645514DC8864D9E5
    63A3F45956DCD57C2F378122B290BA22206EA517FE1F3871F5281F479EE54726
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.697Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5130956458704734899), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5130956458704734899-5339992402576659659-2-0), senderUUID=c373d4d6-0bd5-4b4c-ad14-3d20879774fd))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.697Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.701Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.704Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), maySkipCheckpoint=false, fiber=F1D3D8039837857299B872115CC21E340BE4CB13FD2D1DFF18A67A62B36D253C, )
  Actions: 
    PersistCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=4362560428891798847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899)), errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), frozenFiber=F1D3D8039837857299B872115CC21E340BE4CB13FD2D1DFF18A67A62B36D253C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))])
checkpoint.flowState.frozenFiber.hash: 
    63A3F45956DCD57C2F378122B290BA22206EA517FE1F3871F5281F479EE54726
    F1D3D8039837857299B872115CC21E340BE4CB13FD2D1DFF18A67A62B36D253C
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.704Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.716Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4362560428891798847), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@149056c3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=4362560428891798847).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5130956458704734899))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@149056c3]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.716Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.716Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.717Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7967912881453239586, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.717Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.717Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a16877b2-74aa-4210-af4d-2956c85457c1] ---
  Timestamp: 2019-07-06T10:33:05.731Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7967912881453239586)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)], senderUUID=c373d4d6-0bd5-4b4c-ad14-3d20879774fd)
    CreateTransaction
    RemoveCheckpoint(id=[a16877b2-74aa-4210-af4d-2956c85457c1])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@149056c3])
    ReleaseSoftLocks(uuid=a16877b2-74aa-4210-af4d-2956c85457c1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@149056c3])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=4362560428891798847)])
    RemoveFlow(flowId=[a16877b2-74aa-4210-af4d-2956c85457c1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7967912881453239586, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Invocation, sessionId=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, timestamp: 2019-07-06T10:33:05.673Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=4362560428891798847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5130956458704734899-5339992402576659659)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=4362560428891798847))]), frozenFiber=F1D3D8039837857299B872115CC21E340BE4CB13FD2D1DFF18A67A62B36D253C), errorState=Errored(errors=[FlowError(errorId=7967912881453239586, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1c054c03, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=c373d4d6-0bd5-4b4c-ad14-3d20879774fd))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@149056c3]
    []
isRemoved: 
    false
    true
 {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
[WARN ] 2019-07-06T10:33:05,734Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a16877b2-74aa-4210-af4d-2956c85457c1] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=a16877b2-74aa-4210-af4d-2956c85457c1, invocation_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, invocation_timestamp=2019-07-06T10:33:05.673Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1ffa8e30-f914-4748-9b13-9fb7bb9265dc, session_timestamp=2019-07-06T10:33:05.673Z, thread-id=462, tx_id=24E620A1F8181621FC6205B08C293C46D20A622992ACE365B3DF06992EC39645}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=4362560428891798847) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:33:05,817Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103305.766/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:33:05,819Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103305.766/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:33:05,820Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103305.766/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:33:05,839Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:33:05,844Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:33:05,848Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:05,848Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:05,854Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:33:05.766Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:33:06,229Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:33:06,230Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103305.766/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:33:06,237Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:33:06,239Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:33:06,241Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:06,241Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:06,322Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:06,330Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:33:06,355Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:33:06,363Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:33:06,363Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:33:06,480Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:33:06,485Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:33:06,485Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409186485) {}
[INFO ] 2019-07-06T10:33:06,487Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:06,501Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409186485) {}
[INFO ] 2019-07-06T10:33:06,510Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:33:06,522Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409186485) {}
[INFO ] 2019-07-06T10:33:06,531Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:06,558Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:33:06,560Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:33:06,560Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:33:06,566Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409186485) {}
[INFO ] 2019-07-06T10:33:06,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409186485) {}
[INFO ] 2019-07-06T10:33:06,574Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:06,575Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409186485) {}
[INFO ] 2019-07-06T10:33:06,576Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:06,579Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103305.766/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:33:06,581Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103305.766/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:33:06,581Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103305.766/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:33:06,600Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:33:06,606Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:33:06,633Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:06,633Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:06,636Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:33:05.766Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:33:06,949Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:33:06,951Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103305.766/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:33:06,951Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:33:06,952Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:33:06,954Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:06,954Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:07,010Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:07,017Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:33:07,019Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:33:07,019Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:33:07,049Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:07,049Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:07,151Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:07,155Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:33:07,155Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409187155) {}
[INFO ] 2019-07-06T10:33:07,157Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:07,162Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409187155) {}
[INFO ] 2019-07-06T10:33:07,167Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:33:07,184Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409187155) {}
[INFO ] 2019-07-06T10:33:07,189Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:07,202Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:33:07,207Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409187155) {}
[INFO ] 2019-07-06T10:33:07,213Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409186485) {}
[INFO ] 2019-07-06T10:33:07,214Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:07,223Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409187155) {}
[INFO ] 2019-07-06T10:33:07,225Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:07,231Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409187155) {}
[INFO ] 2019-07-06T10:33:07,231Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:07,231Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409187155) {}
[INFO ] 2019-07-06T10:33:07,232Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:07,234Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103305.766/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:33:07,234Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103305.766/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:33:07,234Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103305.766/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:33:07,248Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:33:07,251Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:33:07,296Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:07,296Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:33:07,298Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:33:05.766Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:33:07,658Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:33:07,660Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103305.766/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:33:07,660Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:33:07,661Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:33:07,663Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:07,663Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:07,738Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:33:07,746Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:33:07,748Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:33:07,748Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:33:07,763Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:07,763Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:07,839Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:33:07,842Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:33:07,843Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409187842) {}
[INFO ] 2019-07-06T10:33:07,844Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:07,849Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409187842) {}
[INFO ] 2019-07-06T10:33:07,854Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:33:07,862Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409187842) {}
[INFO ] 2019-07-06T10:33:07,867Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:07,898Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9 uploader=app filename=null {}
[INFO ] 2019-07-06T10:33:07,904Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409187842) {}
[INFO ] 2019-07-06T10:33:07,910Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409186485) {}
[INFO ] 2019-07-06T10:33:07,911Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:07,917Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409187842) {}
[INFO ] 2019-07-06T10:33:07,919Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:07,928Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409187155) {}
[INFO ] 2019-07-06T10:33:07,929Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:07,936Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409187842) {}
[INFO ] 2019-07-06T10:33:07,937Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:33:07,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409187842) {}
[INFO ] 2019-07-06T10:33:07,944Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:07,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409187842) {}
[INFO ] 2019-07-06T10:33:07,944Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:33:09,275Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=5fbf1d29-f3b6-44f0-92ec-3320d2ffa64a, invocation_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, invocation_timestamp=2019-07-06T10:33:07.948Z, origin=Only For Testing, session_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, session_timestamp=2019-07-06T10:33:07.948Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[INFO ] 2019-07-06T10:33:09,275Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=5fbf1d29-f3b6-44f0-92ec-3320d2ffa64a, invocation_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, invocation_timestamp=2019-07-06T10:33:07.948Z, origin=Only For Testing, session_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, session_timestamp=2019-07-06T10:33:07.948Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[INFO ] 2019-07-06T10:33:09,290Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=5fbf1d29-f3b6-44f0-92ec-3320d2ffa64a, invocation_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, invocation_timestamp=2019-07-06T10:33:07.948Z, origin=Only For Testing, session_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, session_timestamp=2019-07-06T10:33:07.948Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[INFO ] 2019-07-06T10:33:09,323Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[WARN ] 2019-07-06T10:33:09,323Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[INFO ] 2019-07-06T10:33:09,331Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[INFO ] 2019-07-06T10:33:09,351Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=5fbf1d29-f3b6-44f0-92ec-3320d2ffa64a, invocation_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, invocation_timestamp=2019-07-06T10:33:07.948Z, origin=Only For Testing, session_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, session_timestamp=2019-07-06T10:33:07.948Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[INFO ] 2019-07-06T10:33:09,352Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=5fbf1d29-f3b6-44f0-92ec-3320d2ffa64a, invocation_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, invocation_timestamp=2019-07-06T10:33:07.948Z, origin=Only For Testing, session_id=6c78a8b9-e2da-4a20-ad74-56205e72546d, session_timestamp=2019-07-06T10:33:07.948Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[INFO ] 2019-07-06T10:33:09,358Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:33:09,359Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [1086d943-0dbc-410a-a9c5-36eae480e38c] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4310154308979345729)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), frozenFiber=4BA6732C081F6A29C7FAA1837786583DBFA6C458BFFC842A7F5359BDAF06350B), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3eb9fd81, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@14a2bcde], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=ee526db8-6383-4eff-9f58-7a38049a84e1) {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[INFO ] 2019-07-06T10:33:09,359Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [1086d943-0dbc-410a-a9c5-36eae480e38c] has error [0] {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:33:09,362Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [1086d943-0dbc-410a-a9c5-36eae480e38c] error allowed to propagate {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[WARN ] 2019-07-06T10:33:09,366Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1086d943-0dbc-410a-a9c5-36eae480e38c] errored, dumping all transitions:

 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.317Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=524DE4D1320380EF26FAF6AF8B05F8B256ADAB5F175C0CFA1B7DB706A7DEF5E5), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67e5a5bc])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67e5a5bc])
    SignalFlowHasStarted(flowId=[1086d943-0dbc-410a-a9c5-36eae480e38c])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6307521136340160506), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4310154308979345729), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6307521136340160506-5348891748461381155-0-0), senderUUID=ee526db8-6383-4eff-9f58-7a38049a84e1))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4310154308979345729): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6307521136340160506)), errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67e5a5bc]
    []


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.317Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.317Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.320Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), maySkipCheckpoint=false, fiber=775B5D74AA94E115DC407A382E7C3F564CA3A236EBB300705136275B227B66F3, )
  Actions: 
    PersistCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4310154308979345729)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6307521136340160506)), errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), frozenFiber=775B5D74AA94E115DC407A382E7C3F564CA3A236EBB300705136275B227B66F3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=524DE4D1320380EF26FAF6AF8B05F8B256ADAB5F175C0CFA1B7DB706A7DEF5E5)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), frozenFiber=775B5D74AA94E115DC407A382E7C3F564CA3A236EBB300705136275B227B66F3)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.321Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4310154308979345729).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.324Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.329Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=3A54EA1466911737B8A4EEBAF1FE746BC3475AA3F655533887A5D227D0D0AD8F, )
  Actions: 
    PersistCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4310154308979345729)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6307521136340160506)), errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=3A54EA1466911737B8A4EEBAF1FE746BC3475AA3F655533887A5D227D0D0AD8F), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    775B5D74AA94E115DC407A382E7C3F564CA3A236EBB300705136275B227B66F3
    3A54EA1466911737B8A4EEBAF1FE746BC3475AA3F655533887A5D227D0D0AD8F
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.331Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6307521136340160506), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6307521136340160506-5348891748461381155-2-0), senderUUID=ee526db8-6383-4eff-9f58-7a38049a84e1))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.331Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.335Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.342Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), maySkipCheckpoint=false, fiber=4BA6732C081F6A29C7FAA1837786583DBFA6C458BFFC842A7F5359BDAF06350B, )
  Actions: 
    PersistCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4310154308979345729)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6307521136340160506)), errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), frozenFiber=4BA6732C081F6A29C7FAA1837786583DBFA6C458BFFC842A7F5359BDAF06350B), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))])
checkpoint.flowState.frozenFiber.hash: 
    3A54EA1466911737B8A4EEBAF1FE746BC3475AA3F655533887A5D227D0D0AD8F
    4BA6732C081F6A29C7FAA1837786583DBFA6C458BFFC842A7F5359BDAF06350B
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.343Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.358Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4310154308979345729), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@14a2bcde, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4310154308979345729).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=6307521136340160506))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@14a2bcde]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.358Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.358Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.363Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2229273874798677884, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.363Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.363Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[WARN ] 2019-07-06T10:33:09,368Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1086d943-0dbc-410a-a9c5-36eae480e38c] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-06T10:33:09,370Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[WARN ] 2019-07-06T10:33:09,378Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1086d943-0dbc-410a-a9c5-36eae480e38c] errored, dumping all transitions:

 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.317Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=524DE4D1320380EF26FAF6AF8B05F8B256ADAB5F175C0CFA1B7DB706A7DEF5E5), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67e5a5bc])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67e5a5bc])
    SignalFlowHasStarted(flowId=[1086d943-0dbc-410a-a9c5-36eae480e38c])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6307521136340160506), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4310154308979345729), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6307521136340160506-5348891748461381155-0-0), senderUUID=ee526db8-6383-4eff-9f58-7a38049a84e1))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4310154308979345729): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6307521136340160506)), errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67e5a5bc]
    []


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.317Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.317Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.320Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), maySkipCheckpoint=false, fiber=775B5D74AA94E115DC407A382E7C3F564CA3A236EBB300705136275B227B66F3, )
  Actions: 
    PersistCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4310154308979345729)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6307521136340160506)), errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), frozenFiber=775B5D74AA94E115DC407A382E7C3F564CA3A236EBB300705136275B227B66F3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=524DE4D1320380EF26FAF6AF8B05F8B256ADAB5F175C0CFA1B7DB706A7DEF5E5)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), frozenFiber=775B5D74AA94E115DC407A382E7C3F564CA3A236EBB300705136275B227B66F3)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.321Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4310154308979345729).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.324Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.329Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=3A54EA1466911737B8A4EEBAF1FE746BC3475AA3F655533887A5D227D0D0AD8F, )
  Actions: 
    PersistCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4310154308979345729)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6307521136340160506)), errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=3A54EA1466911737B8A4EEBAF1FE746BC3475AA3F655533887A5D227D0D0AD8F), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    775B5D74AA94E115DC407A382E7C3F564CA3A236EBB300705136275B227B66F3
    3A54EA1466911737B8A4EEBAF1FE746BC3475AA3F655533887A5D227D0D0AD8F
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.331Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6307521136340160506), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6307521136340160506-5348891748461381155-2-0), senderUUID=ee526db8-6383-4eff-9f58-7a38049a84e1))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.331Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.335Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.342Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), maySkipCheckpoint=false, fiber=4BA6732C081F6A29C7FAA1837786583DBFA6C458BFFC842A7F5359BDAF06350B, )
  Actions: 
    PersistCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4310154308979345729)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6307521136340160506)), errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), frozenFiber=4BA6732C081F6A29C7FAA1837786583DBFA6C458BFFC842A7F5359BDAF06350B), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))])
checkpoint.flowState.frozenFiber.hash: 
    3A54EA1466911737B8A4EEBAF1FE746BC3475AA3F655533887A5D227D0D0AD8F
    4BA6732C081F6A29C7FAA1837786583DBFA6C458BFFC842A7F5359BDAF06350B
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.343Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.358Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4310154308979345729), payload=net.corda.node.services.statemachine.EndSessionMessage@610d55b8), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@14a2bcde, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4310154308979345729).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=6307521136340160506))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@14a2bcde]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.358Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.358Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)]


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.363Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2229273874798677884, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.363Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.363Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [1086d943-0dbc-410a-a9c5-36eae480e38c] ---
  Timestamp: 2019-07-06T10:33:09.375Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2229273874798677884)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)], senderUUID=ee526db8-6383-4eff-9f58-7a38049a84e1)
    CreateTransaction
    RemoveCheckpoint(id=[1086d943-0dbc-410a-a9c5-36eae480e38c])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@14a2bcde])
    ReleaseSoftLocks(uuid=1086d943-0dbc-410a-a9c5-36eae480e38c)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@14a2bcde])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4310154308979345729)])
    RemoveFlow(flowId=[1086d943-0dbc-410a-a9c5-36eae480e38c], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2229273874798677884, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Invocation, sessionId=bff31ffe-bfd1-4557-8133-1d4bdc537298, timestamp: 2019-07-06T10:33:09.309Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4310154308979345729)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6307521136340160506-5348891748461381155)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=29DDE17D555B2FC85E8813549D221FA22E6B7C0F33EE80B4D2430EBD6C9650F9), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4310154308979345729))]), frozenFiber=4BA6732C081F6A29C7FAA1837786583DBFA6C458BFFC842A7F5359BDAF06350B), errorState=Errored(errors=[FlowError(errorId=2229273874798677884, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3eb9fd81, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=ee526db8-6383-4eff-9f58-7a38049a84e1))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@14a2bcde]
    []
isRemoved: 
    false
    true
 {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
[WARN ] 2019-07-06T10:33:09,379Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1086d943-0dbc-410a-a9c5-36eae480e38c] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=1086d943-0dbc-410a-a9c5-36eae480e38c, invocation_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, invocation_timestamp=2019-07-06T10:33:09.309Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bff31ffe-bfd1-4557-8133-1d4bdc537298, session_timestamp=2019-07-06T10:33:09.309Z, thread-id=551, tx_id=B95EEE8E6D0F3A64E31272A177D8596FC91F1A0EA5372F7D68E8699959AEAA9A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4310154308979345729) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-06T10:35:09,956Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/dienigma/work/bootcamp-cordapp ... {}
[INFO ] 2019-07-06T10:35:14,246Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103503.460/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:35:14,251Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103503.460/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:14,279Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103503.460/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:14,369Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:15,180Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:15,271Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:15,272Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:15,467Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:03.150Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:30,266Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:30,271Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103503.460/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:30,271Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:30,273Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:30,349Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:30,355Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:32,456Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:33,273Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:33,346Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:33,370Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:33,370Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:33,761Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:33,776Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:33,778Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409333778) {}
[INFO ] 2019-07-06T10:35:33,787Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:33,967Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409333778) {}
[INFO ] 2019-07-06T10:35:34,045Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:34,076Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409333778) {}
[INFO ] 2019-07-06T10:35:34,131Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:34,175Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:34,182Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:35:34,192Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:35:34,632Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409333778) {}
[INFO ] 2019-07-06T10:35:34,652Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409333778) {}
[INFO ] 2019-07-06T10:35:34,654Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:34,654Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409333778) {}
[INFO ] 2019-07-06T10:35:34,654Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:34,659Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103503.460/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:35:34,659Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103503.460/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:34,659Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103503.460/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:34,691Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:34,701Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:34,766Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:34,766Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:34,771Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:03.150Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:35,421Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:35,451Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103503.460/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:35,451Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:35,453Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:35,455Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:35,456Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:35,596Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:35,621Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:35,628Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:35,628Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:35,653Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:35,655Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:35,828Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:35,835Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:35,835Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409335835) {}
[INFO ] 2019-07-06T10:35:35,837Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:35,850Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409335835) {}
[INFO ] 2019-07-06T10:35:35,868Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:35,882Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409335835) {}
[INFO ] 2019-07-06T10:35:35,902Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:35,941Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:35,955Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409335835) {}
[INFO ] 2019-07-06T10:35:35,966Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409333778) {}
[INFO ] 2019-07-06T10:35:35,969Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:35,986Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409335835) {}
[INFO ] 2019-07-06T10:35:35,989Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:36,005Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409335835) {}
[INFO ] 2019-07-06T10:35:36,007Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:36,008Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409335835) {}
[INFO ] 2019-07-06T10:35:36,010Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:36,013Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103503.460/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:35:36,015Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103503.460/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:36,017Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103503.460/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:36,040Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:36,048Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:36,084Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:36,086Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:36,093Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:03.150Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:36,619Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:36,622Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103503.460/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:36,622Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:36,623Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:36,626Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:36,626Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:36,734Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:36,745Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:36,753Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:36,754Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:36,779Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:36,779Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:36,929Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:36,937Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:36,937Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409336937) {}
[INFO ] 2019-07-06T10:35:36,939Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:36,950Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409336937) {}
[INFO ] 2019-07-06T10:35:36,961Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:36,975Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409336937) {}
[INFO ] 2019-07-06T10:35:37,001Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:37,023Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:37,038Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409336937) {}
[INFO ] 2019-07-06T10:35:37,045Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409333778) {}
[INFO ] 2019-07-06T10:35:37,048Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:37,063Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409336937) {}
[INFO ] 2019-07-06T10:35:37,066Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:37,079Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409335835) {}
[INFO ] 2019-07-06T10:35:37,081Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:37,096Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409336937) {}
[INFO ] 2019-07-06T10:35:37,099Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:37,111Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409336937) {}
[INFO ] 2019-07-06T10:35:37,111Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:37,111Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409336937) {}
[INFO ] 2019-07-06T10:35:37,112Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-06T10:35:37,446Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a9edf16a-7557-4e52-9745-0a27b6bedf82, invocation_id=baeda3e6-2963-463b-83f1-69f98693463b, invocation_timestamp=2019-07-06T10:35:37.154Z, origin=Only For Testing, session_id=baeda3e6-2963-463b-83f1-69f98693463b, session_timestamp=2019-07-06T10:35:37.154Z, thread-id=102}
[WARN ] 2019-07-06T10:35:37,446Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a9edf16a-7557-4e52-9745-0a27b6bedf82, invocation_id=baeda3e6-2963-463b-83f1-69f98693463b, invocation_timestamp=2019-07-06T10:35:37.154Z, origin=Only For Testing, session_id=baeda3e6-2963-463b-83f1-69f98693463b, session_timestamp=2019-07-06T10:35:37.154Z, thread-id=102}
[WARN ] 2019-07-06T10:35:39,696Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a9edf16a-7557-4e52-9745-0a27b6bedf82, invocation_id=baeda3e6-2963-463b-83f1-69f98693463b, invocation_timestamp=2019-07-06T10:35:37.154Z, origin=Only For Testing, session_id=baeda3e6-2963-463b-83f1-69f98693463b, session_timestamp=2019-07-06T10:35:37.154Z, thread-id=102}
[INFO ] 2019-07-06T10:35:39,965Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[WARN ] 2019-07-06T10:35:39,976Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,016Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[WARN ] 2019-07-06T10:35:40,079Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,111Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a9edf16a-7557-4e52-9745-0a27b6bedf82, invocation_id=baeda3e6-2963-463b-83f1-69f98693463b, invocation_timestamp=2019-07-06T10:35:37.154Z, origin=Only For Testing, session_id=baeda3e6-2963-463b-83f1-69f98693463b, session_timestamp=2019-07-06T10:35:37.154Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,111Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a9edf16a-7557-4e52-9745-0a27b6bedf82, invocation_id=baeda3e6-2963-463b-83f1-69f98693463b, invocation_timestamp=2019-07-06T10:35:37.154Z, origin=Only For Testing, session_id=baeda3e6-2963-463b-83f1-69f98693463b, session_timestamp=2019-07-06T10:35:37.154Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,154Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a9edf16a-7557-4e52-9745-0a27b6bedf82, invocation_id=baeda3e6-2963-463b-83f1-69f98693463b, invocation_timestamp=2019-07-06T10:35:37.154Z, origin=Only For Testing, session_id=baeda3e6-2963-463b-83f1-69f98693463b, session_timestamp=2019-07-06T10:35:37.154Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,181Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[WARN ] 2019-07-06T10:35:40,181Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,189Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,196Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,203Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=cff2fd83-0f69-4ea4-9d26-6ec9933f8fbb, invocation_id=e73dbf11-0a6d-4c9b-812e-658158107d86, invocation_timestamp=2019-07-06T10:35:39.850Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e73dbf11-0a6d-4c9b-812e-658158107d86, session_timestamp=2019-07-06T10:35:39.850Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,242Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a9edf16a-7557-4e52-9745-0a27b6bedf82, invocation_id=baeda3e6-2963-463b-83f1-69f98693463b, invocation_timestamp=2019-07-06T10:35:37.154Z, origin=Only For Testing, session_id=baeda3e6-2963-463b-83f1-69f98693463b, session_timestamp=2019-07-06T10:35:37.154Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,243Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a9edf16a-7557-4e52-9745-0a27b6bedf82, invocation_id=baeda3e6-2963-463b-83f1-69f98693463b, invocation_timestamp=2019-07-06T10:35:37.154Z, origin=Only For Testing, session_id=baeda3e6-2963-463b-83f1-69f98693463b, session_timestamp=2019-07-06T10:35:37.154Z, thread-id=102, tx_id=071FECF06AFCCAE23D1279DBF06ACF6839487E0F756807F35F36D97C3A62E0EF}
[INFO ] 2019-07-06T10:35:40,374Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103540.286/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:35:40,375Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103540.286/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:40,376Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103540.286/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:40,403Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:40,409Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:40,413Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:40,414Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:40,421Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:40.286Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:41,020Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:41,022Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103540.286/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:41,023Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:41,024Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:41,027Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:41,027Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:41,131Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:41,141Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:41,173Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:41,182Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:41,182Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:41,327Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:41,333Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:41,333Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409341333) {}
[INFO ] 2019-07-06T10:35:41,335Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:41,362Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409341333) {}
[INFO ] 2019-07-06T10:35:41,376Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:41,390Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409341333) {}
[INFO ] 2019-07-06T10:35:41,412Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:41,441Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:41,444Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:35:41,445Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:35:41,456Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409341333) {}
[INFO ] 2019-07-06T10:35:41,460Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409341333) {}
[INFO ] 2019-07-06T10:35:41,460Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:41,460Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409341333) {}
[INFO ] 2019-07-06T10:35:41,460Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:41,463Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103540.286/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:35:41,463Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103540.286/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:41,463Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103540.286/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:41,489Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:41,497Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:41,524Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:41,546Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:41,550Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:40.286Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:41,990Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:41,992Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103540.286/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:41,992Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:41,993Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:41,995Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:41,996Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:42,134Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:42,146Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:42,149Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:42,150Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:42,277Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:42,279Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:42,554Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:42,563Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:42,564Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409342564) {}
[INFO ] 2019-07-06T10:35:42,573Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:42,597Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409342564) {}
[INFO ] 2019-07-06T10:35:42,606Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:42,627Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409342564) {}
[INFO ] 2019-07-06T10:35:42,653Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:42,679Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:42,688Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409342564) {}
[INFO ] 2019-07-06T10:35:42,695Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409341333) {}
[INFO ] 2019-07-06T10:35:42,697Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:42,708Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409342564) {}
[INFO ] 2019-07-06T10:35:42,709Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:42,720Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409342564) {}
[INFO ] 2019-07-06T10:35:42,720Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:42,720Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409342564) {}
[INFO ] 2019-07-06T10:35:42,720Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:42,723Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103540.286/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:35:42,724Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103540.286/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:42,724Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103540.286/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:42,749Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:42,755Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:42,795Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:42,795Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:42,799Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:40.286Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:43,196Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:43,198Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103540.286/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:43,198Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:43,199Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:43,201Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:43,202Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:43,300Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:43,309Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:43,311Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:43,312Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:43,348Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:43,348Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:43,483Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:43,491Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:43,491Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409343491) {}
[INFO ] 2019-07-06T10:35:43,493Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:43,500Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409343491) {}
[INFO ] 2019-07-06T10:35:43,507Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:43,510Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409343491) {}
[INFO ] 2019-07-06T10:35:43,524Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:43,557Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:43,568Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409343491) {}
[INFO ] 2019-07-06T10:35:43,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409341333) {}
[INFO ] 2019-07-06T10:35:43,575Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:43,586Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409343491) {}
[INFO ] 2019-07-06T10:35:43,588Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:43,597Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409342564) {}
[INFO ] 2019-07-06T10:35:43,599Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:43,609Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409343491) {}
[INFO ] 2019-07-06T10:35:43,610Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:43,620Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409343491) {}
[INFO ] 2019-07-06T10:35:43,620Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:43,620Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409343491) {}
[INFO ] 2019-07-06T10:35:43,620Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-06T10:35:44,939Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=5bbc8247-9805-4303-8bcb-f121ecb4343a, invocation_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, invocation_timestamp=2019-07-06T10:35:43.623Z, origin=Only For Testing, session_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, session_timestamp=2019-07-06T10:35:43.623Z, thread-id=194}
[INFO ] 2019-07-06T10:35:44,994Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[WARN ] 2019-07-06T10:35:44,995Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,007Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[WARN ] 2019-07-06T10:35:45,057Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,078Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=5bbc8247-9805-4303-8bcb-f121ecb4343a, invocation_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, invocation_timestamp=2019-07-06T10:35:43.623Z, origin=Only For Testing, session_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, session_timestamp=2019-07-06T10:35:43.623Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,079Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=5bbc8247-9805-4303-8bcb-f121ecb4343a, invocation_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, invocation_timestamp=2019-07-06T10:35:43.623Z, origin=Only For Testing, session_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, session_timestamp=2019-07-06T10:35:43.623Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,096Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=5bbc8247-9805-4303-8bcb-f121ecb4343a, invocation_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, invocation_timestamp=2019-07-06T10:35:43.623Z, origin=Only For Testing, session_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, session_timestamp=2019-07-06T10:35:43.623Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,114Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[WARN ] 2019-07-06T10:35:45,118Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,128Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,136Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,143Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000004, flow-id=a0a4209d-4cee-4373-b215-7534f862ec5c, invocation_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, invocation_timestamp=2019-07-06T10:35:44.970Z, origin=O=Mock Company 1, L=London, C=GB, session_id=18f6cdf7-b154-4cfe-8505-ba1e91d08307, session_timestamp=2019-07-06T10:35:44.970Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,158Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=5bbc8247-9805-4303-8bcb-f121ecb4343a, invocation_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, invocation_timestamp=2019-07-06T10:35:43.623Z, origin=Only For Testing, session_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, session_timestamp=2019-07-06T10:35:43.623Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,158Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=5bbc8247-9805-4303-8bcb-f121ecb4343a, invocation_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, invocation_timestamp=2019-07-06T10:35:43.623Z, origin=Only For Testing, session_id=8cc6d424-8940-4e2a-85ca-f82368fa76c3, session_timestamp=2019-07-06T10:35:43.623Z, thread-id=194, tx_id=080CB4E0B0D71CA1D1AFF9E05FB878CBC787642D554CE6599F35C58313EE6F6F}
[INFO ] 2019-07-06T10:35:45,290Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103545.188/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:35:45,291Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103545.188/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:45,292Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103545.188/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:45,309Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:45,317Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:45,320Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:45,321Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:45,326Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:45.188Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:45,732Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:45,734Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103545.188/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:45,734Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:45,736Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:45,738Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:45,738Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:45,828Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:45,836Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:45,862Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:45,869Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:45,869Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:45,994Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:46,000Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:46,000Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409346000) {}
[INFO ] 2019-07-06T10:35:46,002Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:46,024Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409346000) {}
[INFO ] 2019-07-06T10:35:46,033Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:46,038Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409346000) {}
[INFO ] 2019-07-06T10:35:46,052Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:46,086Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:46,088Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:35:46,089Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:35:46,096Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409346000) {}
[INFO ] 2019-07-06T10:35:46,101Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409346000) {}
[INFO ] 2019-07-06T10:35:46,101Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:46,101Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409346000) {}
[INFO ] 2019-07-06T10:35:46,101Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:46,104Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103545.188/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:35:46,104Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103545.188/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:46,104Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103545.188/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:46,118Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:46,130Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:46,164Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:46,165Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:46,176Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:45.188Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:46,661Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:46,666Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103545.188/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:46,666Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:46,668Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:46,677Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:46,677Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:46,812Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:46,820Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:46,822Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:46,823Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:46,845Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:46,845Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:46,958Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:46,963Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:46,963Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409346963) {}
[INFO ] 2019-07-06T10:35:46,965Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:46,971Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409346963) {}
[INFO ] 2019-07-06T10:35:46,978Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:46,987Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409346963) {}
[INFO ] 2019-07-06T10:35:47,000Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:47,028Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:47,036Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409346963) {}
[INFO ] 2019-07-06T10:35:47,041Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409346000) {}
[INFO ] 2019-07-06T10:35:47,043Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:47,053Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409346963) {}
[INFO ] 2019-07-06T10:35:47,054Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:47,064Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409346963) {}
[INFO ] 2019-07-06T10:35:47,064Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:47,064Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409346963) {}
[INFO ] 2019-07-06T10:35:47,064Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:47,069Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103545.188/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:35:47,069Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103545.188/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:47,070Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103545.188/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:47,095Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:47,103Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:47,129Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:47,130Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:47,134Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:45.188Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:47,513Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:47,515Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103545.188/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:47,515Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:47,516Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:47,520Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:47,520Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:47,603Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:47,614Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:47,616Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:47,617Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:47,692Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:47,693Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:47,809Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:47,814Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:47,814Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409347814) {}
[INFO ] 2019-07-06T10:35:47,816Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:47,824Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409347814) {}
[INFO ] 2019-07-06T10:35:47,831Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:47,842Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409347814) {}
[INFO ] 2019-07-06T10:35:47,848Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:47,883Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:47,890Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409347814) {}
[INFO ] 2019-07-06T10:35:47,892Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409346000) {}
[INFO ] 2019-07-06T10:35:47,893Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:47,903Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409347814) {}
[INFO ] 2019-07-06T10:35:47,905Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:47,919Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409346963) {}
[INFO ] 2019-07-06T10:35:47,924Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:47,934Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409347814) {}
[INFO ] 2019-07-06T10:35:47,937Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:47,949Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409347814) {}
[INFO ] 2019-07-06T10:35:47,949Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:47,949Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409347814) {}
[INFO ] 2019-07-06T10:35:47,949Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-06T10:35:49,532Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=468c41a4-5c62-4749-8bfa-5871cf0fbb1e, invocation_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, invocation_timestamp=2019-07-06T10:35:47.952Z, origin=Only For Testing, session_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, session_timestamp=2019-07-06T10:35:47.952Z, thread-id=284}
[INFO ] 2019-07-06T10:35:49,580Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[WARN ] 2019-07-06T10:35:49,581Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,593Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[WARN ] 2019-07-06T10:35:49,633Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,666Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=468c41a4-5c62-4749-8bfa-5871cf0fbb1e, invocation_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, invocation_timestamp=2019-07-06T10:35:47.952Z, origin=Only For Testing, session_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, session_timestamp=2019-07-06T10:35:47.952Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,666Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=468c41a4-5c62-4749-8bfa-5871cf0fbb1e, invocation_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, invocation_timestamp=2019-07-06T10:35:47.952Z, origin=Only For Testing, session_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, session_timestamp=2019-07-06T10:35:47.952Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,686Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=468c41a4-5c62-4749-8bfa-5871cf0fbb1e, invocation_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, invocation_timestamp=2019-07-06T10:35:47.952Z, origin=Only For Testing, session_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, session_timestamp=2019-07-06T10:35:47.952Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,698Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[WARN ] 2019-07-06T10:35:49,698Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,703Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,710Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,715Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=07cf82cf-4cf8-4945-bd0b-ac5fe4ff6526, invocation_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, invocation_timestamp=2019-07-06T10:35:49.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7fdb8ed7-4fed-4793-8b8c-f8f09af50396, session_timestamp=2019-07-06T10:35:49.562Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,726Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=468c41a4-5c62-4749-8bfa-5871cf0fbb1e, invocation_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, invocation_timestamp=2019-07-06T10:35:47.952Z, origin=Only For Testing, session_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, session_timestamp=2019-07-06T10:35:47.952Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,727Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=468c41a4-5c62-4749-8bfa-5871cf0fbb1e, invocation_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, invocation_timestamp=2019-07-06T10:35:47.952Z, origin=Only For Testing, session_id=e5366a1c-146d-473e-ae56-db6edb1ebdf7, session_timestamp=2019-07-06T10:35:47.952Z, thread-id=284, tx_id=1395D1CD17128ED1576988E288CBDCC5C59CCCDF4C6CAB087EA3BCF36C63F813}
[INFO ] 2019-07-06T10:35:49,843Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103549.754/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:35:49,845Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103549.754/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:49,846Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103549.754/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:49,867Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:49,871Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:49,873Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:49,873Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:49,879Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:49.754Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:50,295Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:50,297Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103549.754/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:50,297Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:50,298Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:50,300Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:50,301Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:50,381Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:50,389Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:50,413Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:50,421Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:50,421Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:50,537Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:50,542Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:50,542Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409350542) {}
[INFO ] 2019-07-06T10:35:50,544Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:50,558Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409350542) {}
[INFO ] 2019-07-06T10:35:50,567Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:50,576Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409350542) {}
[INFO ] 2019-07-06T10:35:50,586Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:50,609Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:50,611Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:35:50,611Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:35:50,617Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409350542) {}
[INFO ] 2019-07-06T10:35:50,625Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409350542) {}
[INFO ] 2019-07-06T10:35:50,625Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:50,626Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409350542) {}
[INFO ] 2019-07-06T10:35:50,626Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:50,628Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103549.754/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:35:50,628Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103549.754/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:50,628Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103549.754/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:50,651Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:50,663Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:50,738Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:50,738Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:50,747Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:49.754Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:51,165Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:51,167Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103549.754/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:51,167Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:51,168Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:51,170Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:51,170Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:51,260Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:51,268Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:51,270Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:51,271Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:51,338Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:51,338Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:51,454Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:51,475Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:51,475Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409351475) {}
[INFO ] 2019-07-06T10:35:51,477Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:51,483Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409351475) {}
[INFO ] 2019-07-06T10:35:51,490Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:51,499Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409351475) {}
[INFO ] 2019-07-06T10:35:51,504Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:51,539Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:51,546Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409351475) {}
[INFO ] 2019-07-06T10:35:51,549Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409350542) {}
[INFO ] 2019-07-06T10:35:51,550Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:51,560Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409351475) {}
[INFO ] 2019-07-06T10:35:51,562Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:51,570Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409351475) {}
[INFO ] 2019-07-06T10:35:51,570Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:51,570Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409351475) {}
[INFO ] 2019-07-06T10:35:51,570Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:51,573Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103549.754/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:35:51,573Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103549.754/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:51,573Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103549.754/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:51,592Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:51,596Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:51,677Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:51,677Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:51,689Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:49.754Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:52,049Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:52,051Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103549.754/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:52,051Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:52,053Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:52,055Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:52,055Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:52,132Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:52,140Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:52,142Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:52,143Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:52,157Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:52,157Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:52,267Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:52,272Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:52,272Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409352272) {}
[INFO ] 2019-07-06T10:35:52,274Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:52,280Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409352272) {}
[INFO ] 2019-07-06T10:35:52,285Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:52,294Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409352272) {}
[INFO ] 2019-07-06T10:35:52,307Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:52,341Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:52,351Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409352272) {}
[INFO ] 2019-07-06T10:35:52,356Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409350542) {}
[INFO ] 2019-07-06T10:35:52,359Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:52,367Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409352272) {}
[INFO ] 2019-07-06T10:35:52,369Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:52,379Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409351475) {}
[INFO ] 2019-07-06T10:35:52,381Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:52,392Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409352272) {}
[INFO ] 2019-07-06T10:35:52,394Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:52,401Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409352272) {}
[INFO ] 2019-07-06T10:35:52,402Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:52,403Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409352272) {}
[INFO ] 2019-07-06T10:35:52,404Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-06T10:35:53,449Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6b97a95e-4eda-4da7-8e32-1eaf49cf6de9, invocation_id=1ca35cbc-122b-47a8-b481-60bde59984c3, invocation_timestamp=2019-07-06T10:35:52.408Z, origin=Only For Testing, session_id=1ca35cbc-122b-47a8-b481-60bde59984c3, session_timestamp=2019-07-06T10:35:52.408Z, thread-id=373}
[INFO ] 2019-07-06T10:35:53,486Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[WARN ] 2019-07-06T10:35:53,487Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,495Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[WARN ] 2019-07-06T10:35:53,531Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,544Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6b97a95e-4eda-4da7-8e32-1eaf49cf6de9, invocation_id=1ca35cbc-122b-47a8-b481-60bde59984c3, invocation_timestamp=2019-07-06T10:35:52.408Z, origin=Only For Testing, session_id=1ca35cbc-122b-47a8-b481-60bde59984c3, session_timestamp=2019-07-06T10:35:52.408Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,545Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6b97a95e-4eda-4da7-8e32-1eaf49cf6de9, invocation_id=1ca35cbc-122b-47a8-b481-60bde59984c3, invocation_timestamp=2019-07-06T10:35:52.408Z, origin=Only For Testing, session_id=1ca35cbc-122b-47a8-b481-60bde59984c3, session_timestamp=2019-07-06T10:35:52.408Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,559Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6b97a95e-4eda-4da7-8e32-1eaf49cf6de9, invocation_id=1ca35cbc-122b-47a8-b481-60bde59984c3, invocation_timestamp=2019-07-06T10:35:52.408Z, origin=Only For Testing, session_id=1ca35cbc-122b-47a8-b481-60bde59984c3, session_timestamp=2019-07-06T10:35:52.408Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,572Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[WARN ] 2019-07-06T10:35:53,572Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,577Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,582Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,587Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000008, flow-id=81eb249c-b661-49ad-864c-48f42c3d5359, invocation_id=1e00fc6a-5580-4727-b96c-167155b82057, invocation_timestamp=2019-07-06T10:35:53.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1e00fc6a-5580-4727-b96c-167155b82057, session_timestamp=2019-07-06T10:35:53.470Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,594Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6b97a95e-4eda-4da7-8e32-1eaf49cf6de9, invocation_id=1ca35cbc-122b-47a8-b481-60bde59984c3, invocation_timestamp=2019-07-06T10:35:52.408Z, origin=Only For Testing, session_id=1ca35cbc-122b-47a8-b481-60bde59984c3, session_timestamp=2019-07-06T10:35:52.408Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,594Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6b97a95e-4eda-4da7-8e32-1eaf49cf6de9, invocation_id=1ca35cbc-122b-47a8-b481-60bde59984c3, invocation_timestamp=2019-07-06T10:35:52.408Z, origin=Only For Testing, session_id=1ca35cbc-122b-47a8-b481-60bde59984c3, session_timestamp=2019-07-06T10:35:52.408Z, thread-id=373, tx_id=5637E8605DE22F062096F501208C687B747FD6003A7459537CD53ED4C3D3ACCD}
[INFO ] 2019-07-06T10:35:53,676Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103553.618/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:35:53,677Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103553.618/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:53,677Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103553.618/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:53,697Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:53,704Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:53,707Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:53,707Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:53,713Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:53.618Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:54,102Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:54,104Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103553.618/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:54,104Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:54,105Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:54,117Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,117Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,197Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,205Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:54,228Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:54,233Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,234Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,334Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,340Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:54,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409354340) {}
[INFO ] 2019-07-06T10:35:54,341Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:54,356Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409354340) {}
[INFO ] 2019-07-06T10:35:54,365Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:54,377Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409354340) {}
[INFO ] 2019-07-06T10:35:54,386Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:54,413Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:54,416Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:35:54,417Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:35:54,425Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409354340) {}
[INFO ] 2019-07-06T10:35:54,429Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409354340) {}
[INFO ] 2019-07-06T10:35:54,430Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:54,430Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409354340) {}
[INFO ] 2019-07-06T10:35:54,432Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:54,435Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103553.618/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:35:54,435Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103553.618/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:54,435Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103553.618/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:54,460Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:54,469Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:54,487Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:54,487Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:54,489Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:53.618Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:54,814Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:54,816Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103553.618/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:54,816Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:54,817Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:54,819Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,819Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,913Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:54,920Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:54,922Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:54,923Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:54,938Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:54,938Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:55,048Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:55,051Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:55,051Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409355051) {}
[INFO ] 2019-07-06T10:35:55,053Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:55,058Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409355051) {}
[INFO ] 2019-07-06T10:35:55,062Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:55,068Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409355051) {}
[INFO ] 2019-07-06T10:35:55,075Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:55,087Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:55,092Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409355051) {}
[INFO ] 2019-07-06T10:35:55,094Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409354340) {}
[INFO ] 2019-07-06T10:35:55,095Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:55,104Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409355051) {}
[INFO ] 2019-07-06T10:35:55,105Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:55,114Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409355051) {}
[INFO ] 2019-07-06T10:35:55,114Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:55,114Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409355051) {}
[INFO ] 2019-07-06T10:35:55,114Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:55,116Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103553.618/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:35:55,116Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103553.618/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:55,117Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103553.618/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:55,132Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:55,138Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:55,158Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:55,158Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:55,161Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:53.618Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:55,522Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:55,528Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103553.618/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:55,528Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:55,529Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:55,532Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:55,532Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:55,652Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:55,678Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:55,685Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:55,686Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:55,721Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:55,722Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:55,835Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:55,841Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:55,841Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409355841) {}
[INFO ] 2019-07-06T10:35:55,843Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:55,851Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409355841) {}
[INFO ] 2019-07-06T10:35:55,856Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:55,865Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409355841) {}
[INFO ] 2019-07-06T10:35:55,870Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:55,904Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:55,912Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409355841) {}
[INFO ] 2019-07-06T10:35:55,918Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409354340) {}
[INFO ] 2019-07-06T10:35:55,919Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:55,927Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409355841) {}
[INFO ] 2019-07-06T10:35:55,929Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:55,937Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409355051) {}
[INFO ] 2019-07-06T10:35:55,938Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:55,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409355841) {}
[INFO ] 2019-07-06T10:35:55,945Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:55,953Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409355841) {}
[INFO ] 2019-07-06T10:35:55,953Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:55,953Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409355841) {}
[INFO ] 2019-07-06T10:35:55,953Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-06T10:35:57,334Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=375c12b8-fa47-4d14-8221-3a4141cc0608, invocation_id=21c02da2-0177-4777-b14e-91faa38539fe, invocation_timestamp=2019-07-06T10:35:55.956Z, origin=Only For Testing, session_id=21c02da2-0177-4777-b14e-91faa38539fe, session_timestamp=2019-07-06T10:35:55.956Z, thread-id=462}
[INFO ] 2019-07-06T10:35:57,371Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[WARN ] 2019-07-06T10:35:57,371Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,381Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[WARN ] 2019-07-06T10:35:57,415Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,428Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=375c12b8-fa47-4d14-8221-3a4141cc0608, invocation_id=21c02da2-0177-4777-b14e-91faa38539fe, invocation_timestamp=2019-07-06T10:35:55.956Z, origin=Only For Testing, session_id=21c02da2-0177-4777-b14e-91faa38539fe, session_timestamp=2019-07-06T10:35:55.956Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,429Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=375c12b8-fa47-4d14-8221-3a4141cc0608, invocation_id=21c02da2-0177-4777-b14e-91faa38539fe, invocation_timestamp=2019-07-06T10:35:55.956Z, origin=Only For Testing, session_id=21c02da2-0177-4777-b14e-91faa38539fe, session_timestamp=2019-07-06T10:35:55.956Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,441Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=375c12b8-fa47-4d14-8221-3a4141cc0608, invocation_id=21c02da2-0177-4777-b14e-91faa38539fe, invocation_timestamp=2019-07-06T10:35:55.956Z, origin=Only For Testing, session_id=21c02da2-0177-4777-b14e-91faa38539fe, session_timestamp=2019-07-06T10:35:55.956Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,449Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[WARN ] 2019-07-06T10:35:57,449Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,454Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,459Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,463Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000010, flow-id=66180ad6-410b-4f44-8c20-00f5652a262f, invocation_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, invocation_timestamp=2019-07-06T10:35:57.357Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d9b5abad-339f-4c94-88ae-2c02bc0ccbef, session_timestamp=2019-07-06T10:35:57.357Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,470Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=375c12b8-fa47-4d14-8221-3a4141cc0608, invocation_id=21c02da2-0177-4777-b14e-91faa38539fe, invocation_timestamp=2019-07-06T10:35:55.956Z, origin=Only For Testing, session_id=21c02da2-0177-4777-b14e-91faa38539fe, session_timestamp=2019-07-06T10:35:55.956Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,470Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=375c12b8-fa47-4d14-8221-3a4141cc0608, invocation_id=21c02da2-0177-4777-b14e-91faa38539fe, invocation_timestamp=2019-07-06T10:35:55.956Z, origin=Only For Testing, session_id=21c02da2-0177-4777-b14e-91faa38539fe, session_timestamp=2019-07-06T10:35:55.956Z, thread-id=462, tx_id=268EA7C987156FB99A36A95D9679FCAA999A2AA5005604D293781E44CC16490C}
[INFO ] 2019-07-06T10:35:57,544Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103557.489/nodes/0/cordapps] {}
[INFO ] 2019-07-06T10:35:57,546Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103557.489/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:57,547Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103557.489/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:57,568Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:57,574Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:57,576Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:57,576Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:57,582Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:57.489Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:57,993Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:57,995Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103557.489/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:57,995Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:57,997Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:58,000Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,000Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,075Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,083Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:58,108Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:58,116Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,116Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,234Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,239Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:58,239Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409358239) {}
[INFO ] 2019-07-06T10:35:58,241Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:58,254Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409358239) {}
[INFO ] 2019-07-06T10:35:58,263Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:58,270Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409358239) {}
[INFO ] 2019-07-06T10:35:58,278Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:58,303Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:58,305Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-06T10:35:58,306Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-06T10:35:58,311Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409358239) {}
[INFO ] 2019-07-06T10:35:58,314Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409358239) {}
[INFO ] 2019-07-06T10:35:58,314Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:58,314Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409358239) {}
[INFO ] 2019-07-06T10:35:58,314Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:58,317Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103557.489/nodes/1/cordapps] {}
[INFO ] 2019-07-06T10:35:58,317Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103557.489/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:58,317Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103557.489/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:58,342Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:58,346Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:58,365Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:58,365Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:58,368Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:57.489Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:58,698Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:58,700Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103557.489/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:58,700Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:58,701Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:58,703Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,703Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,766Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:58,774Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:58,776Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:58,776Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:58,790Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:58,790Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:58,896Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:58,901Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:58,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409358901) {}
[INFO ] 2019-07-06T10:35:58,903Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:58,907Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409358901) {}
[INFO ] 2019-07-06T10:35:58,913Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:58,926Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409358901) {}
[INFO ] 2019-07-06T10:35:58,937Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:58,962Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:58,966Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409358901) {}
[INFO ] 2019-07-06T10:35:58,968Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409358239) {}
[INFO ] 2019-07-06T10:35:58,970Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:58,978Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409358901) {}
[INFO ] 2019-07-06T10:35:58,979Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:58,985Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409358901) {}
[INFO ] 2019-07-06T10:35:58,985Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:58,985Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409358901) {}
[INFO ] 2019-07-06T10:35:58,985Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:58,987Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190706-103557.489/nodes/2/cordapps] {}
[INFO ] 2019-07-06T10:35:58,988Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103557.489/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-06T10:35:58,988Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/dienigma/work/bootcamp-cordapp/build/mock-network/20190706-103557.489/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-06T10:35:59,001Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-06T10:35:59,006Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-06T10:35:59,025Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:59,026Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-06T10:35:59,029Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-06T10:35:57.489Z
      epoch=1
  } {}
[INFO ] 2019-07-06T10:35:59,373Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-06T10:35:59,375Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190706-103557.489/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-06T10:35:59,375Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-06T10:35:59,376Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-06T10:35:59,378Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:59,378Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:59,438Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-06T10:35:59,444Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-06T10:35:59,446Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-06T10:35:59,446Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-06T10:35:59,460Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:59,460Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:59,558Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-06T10:35:59,563Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-06T10:35:59,563Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409359563) {}
[INFO ] 2019-07-06T10:35:59,565Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:59,571Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409359563) {}
[INFO ] 2019-07-06T10:35:59,576Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-06T10:35:59,584Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409359563) {}
[INFO ] 2019-07-06T10:35:59,589Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:59,625Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=0F042C9167D075EEAF391ADBBADBA557336E01D5E0EECA47237F35F30664FEA6 uploader=app filename=null {}
[INFO ] 2019-07-06T10:35:59,632Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409359563) {}
[INFO ] 2019-07-06T10:35:59,635Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562409358239) {}
[INFO ] 2019-07-06T10:35:59,636Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:59,645Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409359563) {}
[INFO ] 2019-07-06T10:35:59,646Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:59,653Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562409358901) {}
[INFO ] 2019-07-06T10:35:59,655Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:59,662Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409359563) {}
[INFO ] 2019-07-06T10:35:59,663Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-06T10:35:59,670Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409359563) {}
[INFO ] 2019-07-06T10:35:59,670Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-06T10:35:59,670Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562409359563) {}
[INFO ] 2019-07-06T10:35:59,671Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-06T10:36:00,557Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=9c06d0d5-23db-4a9d-9bef-777391d6eca0, invocation_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, invocation_timestamp=2019-07-06T10:35:59.671Z, origin=Only For Testing, session_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, session_timestamp=2019-07-06T10:35:59.671Z, thread-id=551}
[INFO ] 2019-07-06T10:36:00,583Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[WARN ] 2019-07-06T10:36:00,583Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,589Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[WARN ] 2019-07-06T10:36:00,619Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,632Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=9c06d0d5-23db-4a9d-9bef-777391d6eca0, invocation_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, invocation_timestamp=2019-07-06T10:35:59.671Z, origin=Only For Testing, session_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, session_timestamp=2019-07-06T10:35:59.671Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,632Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=9c06d0d5-23db-4a9d-9bef-777391d6eca0, invocation_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, invocation_timestamp=2019-07-06T10:35:59.671Z, origin=Only For Testing, session_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, session_timestamp=2019-07-06T10:35:59.671Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,647Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=9c06d0d5-23db-4a9d-9bef-777391d6eca0, invocation_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, invocation_timestamp=2019-07-06T10:35:59.671Z, origin=Only For Testing, session_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, session_timestamp=2019-07-06T10:35:59.671Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,656Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[WARN ] 2019-07-06T10:36:00,656Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,661Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,666Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,669Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000012, flow-id=dd97cd32-4452-4c55-a3d6-5fc9adc61241, invocation_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, invocation_timestamp=2019-07-06T10:36:00.571Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4f1a5677-7ef0-446b-8e46-cd27fe62ee19, session_timestamp=2019-07-06T10:36:00.571Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,674Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=9c06d0d5-23db-4a9d-9bef-777391d6eca0, invocation_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, invocation_timestamp=2019-07-06T10:35:59.671Z, origin=Only For Testing, session_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, session_timestamp=2019-07-06T10:35:59.671Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
[INFO ] 2019-07-06T10:36:00,674Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=9c06d0d5-23db-4a9d-9bef-777391d6eca0, invocation_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, invocation_timestamp=2019-07-06T10:35:59.671Z, origin=Only For Testing, session_id=5fd899e7-363e-4d2f-a14d-53907e33b76b, session_timestamp=2019-07-06T10:35:59.671Z, thread-id=551, tx_id=AED5D0F5C3946E368788D8AE99DAB4584A9019416D8B82943BA557008D787C3E}
